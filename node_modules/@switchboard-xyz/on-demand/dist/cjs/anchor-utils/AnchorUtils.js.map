{"version":3,"file":"AnchorUtils.js","sourceRoot":"","sources":["../../../src/anchor-utils/AnchorUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  isDevnetConnection,\n  isMainnetConnection,\n  ON_DEMAND_DEVNET_PID,\n  ON_DEMAND_MAINNET_PID,\n} from \"../utils\";\nimport { getFs } from \"../utils/fs\";\n\nimport {\n  AnchorProvider,\n  BorshEventCoder,\n  Program,\n  web3,\n} from \"@coral-xyz/anchor\";\nimport yaml from \"js-yaml\";\n\ntype SolanaConfig = {\n  rpcUrl: string;\n  webSocketUrl: string;\n  keypairPath: string;\n  commitment: web3.Commitment;\n  keypair: web3.Keypair;\n  connection: web3.Connection;\n  provider: AnchorProvider;\n  wallet: any;\n  program: Program | null;\n};\n\n/*\n * AnchorUtils is a utility class that provides helper functions for working with\n * the Anchor framework. It is a static class, meaning that it does not need to be\n * instantiated to be used. It is a collection of helper functions that can be used\n * to simplify common tasks when working with Anchor.\n */\nexport class AnchorUtils {\n  private static async initWalletFromKeypair(keypair: web3.Keypair) {\n    const { default: NodeWallet } = await import(\n      \"@coral-xyz/anchor/dist/cjs/nodewallet\"\n    );\n    return new NodeWallet(keypair);\n  }\n\n  /**\n   * Initializes a wallet from a file.\n   *\n   * @param {string} filePath - The path to the file containing the wallet's secret key.\n   * @returns {Promise<[Wallet, web3.Keypair]>} A promise that resolves to a tuple containing the wallet and the keypair.\n   */\n  static async initWalletFromFile(filePath: string) {\n    const keypair = await AnchorUtils.initKeypairFromFile(filePath);\n    const wallet = await AnchorUtils.initWalletFromKeypair(keypair);\n    return [wallet, keypair] as const;\n  }\n\n  /**\n   * Initializes a keypair from a file.\n   *\n   * @param {string} filePath - The path to the file containing the keypair's secret key.\n   * @returns {Promise<web3.Keypair>} A promise that resolves to the keypair.\n   */\n  static async initKeypairFromFile(filePath: string): Promise<web3.Keypair> {\n    const secretKeyString = getFs().readFileSync(filePath, {\n      encoding: \"utf8\",\n    });\n    const secretKey: Uint8Array = Uint8Array.from(JSON.parse(secretKeyString));\n    const keypair = web3.Keypair.fromSecretKey(secretKey);\n    return keypair;\n  }\n\n  /**\n   * Loads an Anchor program from a connection.\n   *\n   * @param {web3.Connection} connection - The connection to load the program from.\n   * @returns {Promise<Program>} A promise that resolves to the loaded Anchor program.\n   */\n  static async loadProgramFromConnection(connection: web3.Connection) {\n    const isDevnet = await isDevnetConnection(connection);\n    const pid = isDevnet ? ON_DEMAND_DEVNET_PID : ON_DEMAND_MAINNET_PID;\n    const wallet = await this.initWalletFromKeypair(new web3.Keypair());\n    const provider = new AnchorProvider(connection, wallet);\n    return Program.at(pid, provider);\n  }\n\n  /**\n   * Loads an Anchor program from the environment.\n   *\n   * @returns {Promise<Program>} A promise that resolves to the loaded Anchor program.\n   */\n  static async loadProgramFromEnv(): Promise<Program> {\n    const config = await AnchorUtils.loadEnv();\n    const isDevnet = await isDevnetConnection(config.connection);\n    const pid = isDevnet ? ON_DEMAND_DEVNET_PID : ON_DEMAND_MAINNET_PID;\n    return Program.at(pid, config.provider);\n  }\n\n  /**\n   * Loads the same environment set for the Solana CLI.\n   *\n   * @returns {Promise<SolanaConfig>} A promise that resolves to the Solana configuration.\n   */\n  static async loadEnv(): Promise<SolanaConfig> {\n    const configPath = \"~/.config/solana/cli/config.yml\";\n    const fileContents = getFs().readFileSync(configPath, \"utf8\");\n    const data = yaml.load(fileContents);\n\n    const commitment = data.commitment as web3.Commitment;\n    const connection = new web3.Connection(data.json_rpc_url, {\n      commitment,\n      wsEndpoint: data.websocket_url,\n    });\n\n    const keypairPath = data.keypair_path;\n    const keypair = (await AnchorUtils.initWalletFromFile(keypairPath))[1];\n    const wallet = await this.initWalletFromKeypair(keypair);\n    const provider = new AnchorProvider(connection, wallet);\n\n    const isMainnet = await isMainnetConnection(connection);\n    const pid = isMainnet ? ON_DEMAND_MAINNET_PID : ON_DEMAND_DEVNET_PID;\n    const program = await Program.at(pid, provider);\n\n    return {\n      rpcUrl: connection.rpcEndpoint,\n      webSocketUrl: data.websocket_url,\n      connection: connection,\n      commitment: connection.commitment,\n      keypairPath: keypairPath,\n      keypair: keypair,\n      provider: new AnchorProvider(connection, wallet),\n      wallet: provider.wallet,\n      program: program,\n    };\n  }\n\n  /**\n   * Parse out anchor events from the logs present in the program IDL.\n   *\n   * @param {Program} program - The Anchor program instance.\n   * @param {string[]} logs - The array of logs to parse.\n   * @returns {any[]} An array of parsed events.\n   */\n  static loggedEvents(program: Program, logs: string[]): any[] {\n    const coder = new BorshEventCoder(program.idl);\n    const out: any[] = [];\n    logs.forEach((log) => {\n      if (log.startsWith(\"Program data: \")) {\n        const strings = log.split(\" \");\n        if (strings.length !== 3) return;\n        try {\n          out.push(coder.decode(strings[2]));\n        } catch {}\n      }\n    });\n    return out;\n  }\n}\n"]}
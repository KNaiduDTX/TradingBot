"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeGlobalConfig = initializeGlobalConfig;
exports.initializeVault = initializeVault;
exports.createOrder = createOrder;
exports.takeOrder = takeOrder;
exports.flashTakeOrder = flashTakeOrder;
exports.closeOrderAndClaimTip = closeOrderAndClaimTip;
exports.withdrawHostTipIx = withdrawHostTipIx;
exports.updateGlobalConfigIx = updateGlobalConfigIx;
exports.updateGlobalConfigAdminIx = updateGlobalConfigAdminIx;
const Instructions = __importStar(require("../rpc_client/instructions"));
const anchor = __importStar(require("@coral-xyz/anchor"));
const web3_js_1 = require("@solana/web3.js");
const utils_1 = require("./utils");
const anchor_1 = require("@coral-xyz/anchor");
const index_1 = require("../rpc_client/types/index");
function initializeGlobalConfig(adminAuthority, globalConfig, pdaAuthority, programId) {
    let accounts = {
        adminAuthority,
        pdaAuthority,
        globalConfig,
    };
    let ix = Instructions.initializeGlobalConfig(accounts, programId);
    return ix;
}
function initializeVault(owner, globalConfig, mint, programId, mintProgramId) {
    let vault = (0, utils_1.getTokenVaultPDA)(programId, globalConfig, mint);
    let pdaAuthority = (0, utils_1.getPdaAuthority)(programId, globalConfig);
    let accounts = {
        payer: owner,
        globalConfig,
        pdaAuthority,
        mint,
        vault,
        tokenProgram: mintProgramId,
        systemProgram: anchor.web3.SystemProgram.programId,
    };
    let ix = Instructions.initializeVault(accounts, programId);
    return ix;
}
function createOrder(maker, globalConfig, order, orderParams, programId, baseTokenMintProgramId, quoteTokenMintProgramId) {
    let quoteTokenVault = (0, utils_1.getTokenVaultPDA)(programId, globalConfig, orderParams.quoteTokenMint);
    let baseTokenVault = (0, utils_1.getTokenVaultPDA)(programId, globalConfig, orderParams.baseTokenMint);
    let pdaAuthority = (0, utils_1.getPdaAuthority)(programId, globalConfig);
    let accounts = {
        maker,
        globalConfig,
        pdaAuthority,
        order,
        inputMint: orderParams.side === "bid"
            ? orderParams.baseTokenMint
            : orderParams.quoteTokenMint,
        outputMint: orderParams.side === "bid"
            ? orderParams.quoteTokenMint
            : orderParams.baseTokenMint,
        makerAta: orderParams.side === "bid"
            ? (0, utils_1.getAssociatedTokenAddress)(maker, orderParams.baseTokenMint, baseTokenMintProgramId)
            : (0, utils_1.getAssociatedTokenAddress)(maker, orderParams.quoteTokenMint, quoteTokenMintProgramId),
        inputVault: orderParams.side === "bid" ? baseTokenVault : quoteTokenVault,
        inputTokenProgram: orderParams.side === "bid"
            ? baseTokenMintProgramId
            : quoteTokenMintProgramId,
        outputTokenProgram: orderParams.side === "bid"
            ? quoteTokenMintProgramId
            : baseTokenMintProgramId,
        eventAuthority: (0, utils_1.getEventAuthorityPDA)(programId),
        program: programId,
        systemProgram: web3_js_1.SystemProgram.programId,
    };
    let args = {
        inputAmount: new anchor_1.BN(orderParams.side === "bid"
            ? orderParams.baseTokenAmount
            : orderParams.quoteTokenAmount),
        outputAmount: new anchor_1.BN(orderParams.side === "bid"
            ? orderParams.quoteTokenAmount
            : orderParams.baseTokenAmount),
        orderType: orderParams.side === "bid" ? 0 : 1,
    };
    let ix = Instructions.createOrder(args, accounts, programId);
    return ix;
}
function takeOrder(params) {
    let pdaAuthority = (0, utils_1.getPdaAuthority)(params.programId, params.globalConfig);
    let inputVault = (0, utils_1.getTokenVaultPDA)(params.programId, params.globalConfig, params.inputMint);
    let accounts = {
        taker: params.taker,
        maker: params.maker,
        globalConfig: params.globalConfig,
        pdaAuthority,
        order: params.order,
        inputMint: params.inputMint,
        outputMint: params.outputMint,
        inputVault,
        expressRelay: params.expressRelayProgramId,
        expressRelayMetadata: (0, utils_1.getExpressRelayMetadataPDA)(params.expressRelayProgramId),
        permission: params.permissionless ? params.programId : params.order,
        configRouter: (0, utils_1.getExpressRelayConfigRouterPDA)(params.expressRelayProgramId, pdaAuthority),
        sysvarInstructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,
        takerInputAta: params.takerInputAta,
        intermediaryOutputTokenAccount: params.intermediaryOutputTokenAccount,
        takerOutputAta: params.takerOutputAta,
        makerOutputAta: params.makerOutputAta,
        inputTokenProgram: params.inputTokenProgram,
        outputTokenProgram: params.outputTokenProgram,
        systemProgram: web3_js_1.SystemProgram.programId,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
        eventAuthority: (0, utils_1.getEventAuthorityPDA)(params.programId),
        program: params.programId,
    };
    let args = {
        inputAmount: params.inputAmountLamports,
        minOutputAmount: params.minOutputAmountLamports,
        tipAmountPermissionlessTaking: params.permissionlessTipLamports,
    };
    let ix = Instructions.takeOrder(args, accounts, params.programId);
    return ix;
}
function flashTakeOrder(params) {
    let pdaAuthority = (0, utils_1.getPdaAuthority)(params.programId, params.globalConfig);
    let inputVault = (0, utils_1.getTokenVaultPDA)(params.programId, params.globalConfig, params.inputMint);
    let startAccounts = {
        taker: params.taker,
        maker: params.maker,
        globalConfig: params.globalConfig,
        pdaAuthority,
        order: params.order,
        inputMint: params.inputMint,
        outputMint: params.outputMint,
        inputVault,
        expressRelay: params.expressRelayProgramId,
        expressRelayMetadata: (0, utils_1.getExpressRelayMetadataPDA)(params.expressRelayProgramId),
        permission: params.permissionless ? params.programId : params.order,
        configRouter: (0, utils_1.getExpressRelayConfigRouterPDA)(params.expressRelayProgramId, pdaAuthority),
        sysvarInstructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,
        takerInputAta: params.takerInputAta,
        takerOutputAta: params.takerOutputAta,
        intermediaryOutputTokenAccount: params.intermediaryOutputTokenAccount,
        makerOutputAta: params.makerOutputAta,
        inputTokenProgram: params.inputTokenProgram,
        outputTokenProgram: params.outputTokenProgram,
        systemProgram: web3_js_1.SystemProgram.programId,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
        eventAuthority: (0, utils_1.getEventAuthorityPDA)(params.programId),
        program: params.programId,
    };
    let startArgs = {
        inputAmount: new anchor_1.BN(params.inputAmountLamports),
        minOutputAmount: new anchor_1.BN(params.minOutputAmountLamports),
        tipAmountPermissionlessTaking: params.permissionlessTipLamports ?? new anchor_1.BN(0),
    };
    let startIx = Instructions.flashTakeOrderStart(startArgs, startAccounts, params.programId);
    let endAccounts = {
        taker: params.taker,
        maker: params.maker,
        globalConfig: params.globalConfig,
        pdaAuthority,
        order: params.order,
        inputMint: params.inputMint,
        outputMint: params.outputMint,
        inputVault,
        expressRelay: params.expressRelayProgramId,
        expressRelayMetadata: (0, utils_1.getExpressRelayMetadataPDA)(params.expressRelayProgramId),
        permission: params.permissionless ? params.programId : params.order,
        configRouter: (0, utils_1.getExpressRelayConfigRouterPDA)(params.expressRelayProgramId, pdaAuthority),
        sysvarInstructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,
        takerInputAta: params.takerInputAta,
        takerOutputAta: params.takerOutputAta,
        intermediaryOutputTokenAccount: params.intermediaryOutputTokenAccount,
        makerOutputAta: params.makerOutputAta,
        inputTokenProgram: params.inputTokenProgram,
        outputTokenProgram: params.outputTokenProgram,
        systemProgram: web3_js_1.SystemProgram.programId,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
        eventAuthority: (0, utils_1.getEventAuthorityPDA)(params.programId),
        program: params.programId,
    };
    let endArgs = {
        inputAmount: new anchor_1.BN(params.inputAmountLamports),
        minOutputAmount: new anchor_1.BN(params.minOutputAmountLamports),
        tipAmountPermissionlessTaking: params.permissionlessTipLamports ?? new anchor_1.BN(0),
    };
    let endIx = Instructions.flashTakeOrderEnd(endArgs, endAccounts, params.programId);
    return {
        startIx,
        endIx,
    };
}
function closeOrderAndClaimTip(params) {
    let pdaAuthority = (0, utils_1.getPdaAuthority)(params.programId, params.globalConfig);
    let inputVault = (0, utils_1.getTokenVaultPDA)(params.programId, params.globalConfig, params.inputMint);
    let accounts = {
        maker: params.maker,
        order: params.order,
        globalConfig: params.globalConfig,
        pdaAuthority,
        inputMint: params.inputMint,
        outputMint: params.outputMint,
        makerInputAta: params.makerInputAta,
        inputVault,
        inputTokenProgram: params.inputTokenProgram,
        systemProgram: web3_js_1.SystemProgram.programId,
        eventAuthority: (0, utils_1.getEventAuthorityPDA)(params.programId),
        program: params.programId,
    };
    let ix = Instructions.closeOrderAndClaimTip(accounts, params.programId);
    return ix;
}
function withdrawHostTipIx(params) {
    let pdaAuthority = (0, utils_1.getPdaAuthority)(params.programId, params.globalConfig);
    let accounts = {
        adminAuthority: params.admin,
        globalConfig: params.globalConfig,
        pdaAuthority,
        systemProgram: web3_js_1.SystemProgram.programId,
    };
    let ix = Instructions.withdrawHostTip(accounts, params.programId);
    return ix;
}
function updateGlobalConfigIx(admin, globalConfig, mode, value, programId) {
    let accounts = {
        adminAuthority: admin,
        globalConfig,
    };
    let args = {
        mode: mode.discriminator,
        value: encodedUpdateGlobalConfigValue(mode, value),
    };
    let ix = Instructions.updateGlobalConfig(args, accounts, programId);
    return ix;
}
function updateGlobalConfigAdminIx(globalConfigAddress, globalConfig, programId) {
    let accounts = {
        adminAuthorityCached: globalConfig.adminAuthorityCached,
        globalConfig: globalConfigAddress,
    };
    let ix = Instructions.updateGlobalConfigAdmin(accounts, programId);
    return ix;
}
function encodedUpdateGlobalConfigValue(mode, value) {
    const valueData = Buffer.alloc(128);
    let valueNumber;
    let valuePublicKey;
    switch (mode.discriminator) {
        case index_1.UpdateGlobalConfigMode.UpdateEmergencyMode.discriminator:
        case index_1.UpdateGlobalConfigMode.UpdateFlashTakeOrderBlocked.discriminator:
        case index_1.UpdateGlobalConfigMode.UpdateBlockNewOrders.discriminator:
        case index_1.UpdateGlobalConfigMode.UpdateBlockOrderTaking.discriminator:
        case index_1.UpdateGlobalConfigMode.UpdateOrderTakingPermissionless.discriminator:
            valueNumber = value;
            valueData.writeUIntLE(valueNumber, 0, 1);
            break;
        case index_1.UpdateGlobalConfigMode.UpdateHostFeeBps.discriminator:
            valueNumber = value;
            valueData.writeUInt16LE(valueNumber, 0);
            break;
        case index_1.UpdateGlobalConfigMode.UpdateOrderCloseDelaySeconds.discriminator:
        case index_1.UpdateGlobalConfigMode.UpdateAtaCreationCost.discriminator:
        case index_1.UpdateGlobalConfigMode.UpdateTxnFeeCost.discriminator:
        case index_1.UpdateGlobalConfigMode.UpdateOrderCloseDelaySeconds.discriminator:
            valueNumber = value;
            valueData.writeBigUInt64LE(BigInt(value.toString()), 0);
            break;
        case index_1.UpdateGlobalConfigMode.UpdateAdminAuthorityCached.discriminator:
            valuePublicKey = value.toBuffer();
            valuePublicKey.copy(valueData, 0);
            break;
    }
    const uint8Array = new Uint8Array(valueData);
    return Array.from(uint8Array);
}
//# sourceMappingURL=operations.js.map
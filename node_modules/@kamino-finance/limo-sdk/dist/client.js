#!/usr/bin/env npx ts-node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const anchor = __importStar(require("@coral-xyz/anchor"));
const commander_1 = require("commander");
const utils_1 = require("./commands/utils");
const utils_2 = require("./utils");
const web3_js_1 = require("@solana/web3.js");
const decimal_js_1 = __importDefault(require("decimal.js"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const initCommands_1 = require("./commands/initCommands");
const dotenv_1 = __importDefault(require("dotenv"));
const orderCommands_1 = require("./commands/orderCommands");
const updateCommands_1 = require("./commands/updateCommands");
const websocketCommands_1 = require("./commands/websocketCommands");
dotenv_1.default.config({
    path: `../.env${process.env.ENV ? "." + process.env.ENV : ""}`,
});
async function main() {
    const commands = new commander_1.Command();
    commands
        .name("limo-cli")
        .description("CLI to interact with the LIMO program");
    commands
        .command("init-global-config")
        .option("--global-config-file-path <string>")
        .action(async ({ globalConfigFilePath }) => {
        await (0, initCommands_1.initGlobalConfigCommand)(globalConfigFilePath);
    });
    commands
        .command("init-vault")
        .requiredOption("--mint <string>")
        .requiredOption("--mode <string>", "multisig - will print bs58 txn only, simulate - will print bs64 txn explorer link and simulation, execute - to execute txn")
        .action(async ({ mint, mode }) => {
        await (0, initCommands_1.initVault)(new web3_js_1.PublicKey(mint), mode);
    });
    commands
        .command("init-vaults-from-mints-list")
        .requiredOption("--mints-list-file-path <string>")
        .requiredOption("--mode <string>", "multisig - will print bs58 txn only, simulate - will print bs64 txn explorer link and simulation, execute - to execute txn")
        .action(async ({ mintsListFilePath, mode }) => {
        await (0, initCommands_1.initVaultsFromMintsListFile)(mintsListFilePath, mode);
    });
    commands.command("get-kamino-token-mints").action(async () => {
        await (0, initCommands_1.getKaminoTokenMintsFromApi)();
    });
    commands
        .command("update-global-config")
        .requiredOption("--update-mode <string>", "string value of the update mode, found in rpc_client/types/UpdateGlobalConfigMode.ts")
        .requiredOption("--value <string>")
        .requiredOption("--mode <string>", "multisig - will print bs58 txn only, simulate - will print bs64 txn explorer link and simulation, execute - to execute txn")
        .action(async ({ updateMode, value, mode }) => {
        await (0, updateCommands_1.updateGlobalConfig)(updateMode, value, mode);
    });
    commands
        .command("update-global-config-admin")
        .option("--global-config <string>", "global config pubkey - if not provided will use the global config from the env")
        .requiredOption("--mode <string>", "multisig - will print bs58 txn only, simulate - will print bs64 txn explorer link and simulation, execute - to execute txn")
        .action(async ({ globalConfig, mode }) => {
        await (0, updateCommands_1.updateGlobalConfigAdmin)(globalConfig, mode);
    });
    commands
        .command("place-bid")
        .option("--quote <string>")
        .option("--base <string>")
        .option("--price <string>")
        .option("--base-amount <string>")
        .action(async ({ quote, base, price, baseAmount }) => {
        await (0, orderCommands_1.placeOrder)(quote, base, parseFloat(baseAmount), parseFloat(price), "bid");
    });
    commands
        .command("place-ask")
        .option("--quote <string>")
        .option("--base <string>")
        .option("--price <string>")
        .option("--quote-amount <string>")
        .action(async ({ quote, base, price, quoteAmount }) => {
        await (0, orderCommands_1.placeOrder)(quote, base, parseFloat(quoteAmount), parseFloat(price), "ask");
    });
    commands
        .command("take-order-permissionless")
        .requiredOption("--order <string>", "Order address")
        .option("--amount-to-take <string>", "Input amount to take as a decimal number - if not provided will take the full amount")
        .option("--amount-tip <string>", "Tip amount as a decimal number - if not provided will be 0")
        .requiredOption("--mode <string>", "multisig - will print bs58 txn only, simulate - will print bs64 txn explorer link and simulation, execute - to execute txn")
        .action(async ({ order, amountToTake, amountTip, mode }) => {
        await (0, orderCommands_1.permissionlessTakeOrder)(new web3_js_1.PublicKey(order), amountToTake, amountTip, mode);
    });
    commands
        .command("list-orders-for-user")
        .requiredOption("--user <string>", "User address")
        .action(async ({ user }) => {
        await (0, orderCommands_1.listOrdersForUser)(new web3_js_1.PublicKey(user));
    });
    commands
        .command("list-orders")
        .requiredOption("--quote <string>")
        .requiredOption("--base <string>")
        .option("--filter-out-remaining-amount-base-token <string>", "Filter out orders with remaining amount less than the provided value for the base token")
        .option("--filter-out-remaining-amount-quote-token <string>", "Filter out orders with remaining amount less than the provided value for the quote token")
        .action(async ({ quote, base, filterOutRemainingAmountBaseToken, filterOutRemainingAmountQuoteToken, }) => {
        await (0, orderCommands_1.listOrders)(quote, base, filterOutRemainingAmountBaseToken, filterOutRemainingAmountQuoteToken);
    });
    commands.command("listen-to-order-changes").action(async () => {
        await (0, websocketCommands_1.listenToOrderChanges)();
    });
    commands
        .command("listen-to-latest-filled-orders-changes-for-base-and-quote")
        .requiredOption("--quote-mint <string>")
        .requiredOption("--base-mint <string>")
        .action(async ({ quoteMint, baseMint }) => {
        await (0, websocketCommands_1.listenToOrderChangesForQuoteAndBase)(new web3_js_1.PublicKey(quoteMint), new web3_js_1.PublicKey(baseMint));
    });
    commands
        .command("listen-to-orders-changes-for-maker")
        .requiredOption("--maker <string>")
        .action(async ({ maker }) => {
        await (0, websocketCommands_1.listenToOrderChangesForMaker)(new web3_js_1.PublicKey(maker));
    });
    commands.command("get-all-orders").action(async ({}) => {
        await (0, orderCommands_1.getAllOrders)();
    });
    commands.command("create-mint").action(async () => {
        const admin = process.env.ADMIN;
        const rpc = process.env.RPC_ENV;
        const env = (0, utils_1.initializeClient)(rpc, admin, (0, utils_2.getLimoProgramId)(rpc), false);
        const tokenMint = new anchor.web3.Keypair();
        await (0, utils_2.createMintFromKeypair)(env.provider, env.admin.publicKey, tokenMint);
        console.log("New mint: ", tokenMint.publicKey.toString());
        // create ./tmp folder if it doesn't exist
        if (!fs_1.default.existsSync("./tmp")) {
            fs_1.default.mkdirSync("./tmp");
        }
        const finalPath = path_1.default.resolve(process.cwd(), "tmp", tokenMint.publicKey.toString() + ".json");
        fs_1.default.writeFileSync(finalPath, tokenMint.secretKey);
        console.log("Written to: ", "./tmp/" + tokenMint.publicKey.toString() + ".json");
    });
    commands
        .command("create-ata")
        .option(`--admin <string>`, "The admin keypair file")
        .option(`--cluster <string>`, "The Solana cluster to use")
        .option(`--mint <string>`, "The Mint to use")
        .action(async ({ admin, cluster, mint }) => {
        const env = (0, utils_1.initializeClient)(cluster, admin, (0, utils_2.getLimoProgramId)(cluster), false);
        const tokenMint = new web3_js_1.PublicKey(mint);
        const ata = await (0, utils_2.setupAta)(env.provider, tokenMint, env.admin);
        console.log("new ata: ", ata.toString());
    });
    commands
        .command("mint-token")
        .option(`--owner <string>`, "The owner to mint for")
        .option(`--mint <string>`, "The Mint to use")
        .option(`--amount <string>`, "The amount to reward")
        .action(async ({ owner, mint, amount }) => {
        const admin = process.env.ADMIN;
        const rpc = process.env.RPC_ENV;
        const env = (0, utils_1.initializeClient)(rpc, admin, (0, utils_2.getLimoProgramId)(rpc), false);
        const tokenMint = new web3_js_1.PublicKey(mint);
        const ownerAta = await (0, utils_2.setupAta)(env.provider, tokenMint, env.admin, new web3_js_1.PublicKey(owner));
        const mintDecimals = await (0, utils_2.getMintDecimals)(env.provider.connection, tokenMint);
        const amountLamports = (0, utils_2.amountToLamportsDecimal)(new decimal_js_1.default(amount), mintDecimals);
        // Create ata if necessary
        await (0, utils_2.sleep)(2000);
        // Mint to ata
        await (0, utils_2.mintTo)(env.provider, tokenMint, ownerAta, amountLamports.toNumber(), mintDecimals);
        await (0, utils_2.sleep)(2000);
        const balance = await env.provider.connection.getTokenAccountBalance(ownerAta);
        console.log("Minted", amount, tokenMint.toString(), "final balance:", balance.value.uiAmount);
    });
    await commands.parseAsync();
}
main()
    .then(() => {
    process.exit();
})
    .catch((e) => {
    console.error("\nLimo CLI exited with error:\n\n", e);
    process.exit(1);
});
//# sourceMappingURL=client.js.map
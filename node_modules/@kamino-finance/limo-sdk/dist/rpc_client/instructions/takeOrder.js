"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.layout = void 0;
exports.takeOrder = takeOrder;
const web3_js_1 = require("@solana/web3.js"); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const programId_1 = require("../programId");
exports.layout = borsh.struct([
    borsh.u64("inputAmount"),
    borsh.u64("minOutputAmount"),
    borsh.u64("tipAmountPermissionlessTaking"),
]);
function takeOrder(args, accounts, programId = programId_1.PROGRAM_ID) {
    const keys = [
        { pubkey: accounts.taker, isSigner: true, isWritable: true },
        { pubkey: accounts.maker, isSigner: false, isWritable: true },
        { pubkey: accounts.globalConfig, isSigner: false, isWritable: true },
        { pubkey: accounts.pdaAuthority, isSigner: false, isWritable: true },
        { pubkey: accounts.order, isSigner: false, isWritable: true },
        { pubkey: accounts.inputMint, isSigner: false, isWritable: false },
        { pubkey: accounts.outputMint, isSigner: false, isWritable: false },
        { pubkey: accounts.inputVault, isSigner: false, isWritable: true },
        { pubkey: accounts.takerInputAta, isSigner: false, isWritable: true },
        { pubkey: accounts.takerOutputAta, isSigner: false, isWritable: true },
        {
            pubkey: accounts.intermediaryOutputTokenAccount,
            isSigner: false,
            isWritable: true,
        },
        { pubkey: accounts.makerOutputAta, isSigner: false, isWritable: true },
        { pubkey: accounts.expressRelay, isSigner: false, isWritable: false },
        {
            pubkey: accounts.expressRelayMetadata,
            isSigner: false,
            isWritable: false,
        },
        { pubkey: accounts.sysvarInstructions, isSigner: false, isWritable: false },
        { pubkey: accounts.permission, isSigner: false, isWritable: false },
        { pubkey: accounts.configRouter, isSigner: false, isWritable: false },
        { pubkey: accounts.inputTokenProgram, isSigner: false, isWritable: false },
        { pubkey: accounts.outputTokenProgram, isSigner: false, isWritable: false },
        { pubkey: accounts.rent, isSigner: false, isWritable: false },
        { pubkey: accounts.systemProgram, isSigner: false, isWritable: false },
        { pubkey: accounts.eventAuthority, isSigner: false, isWritable: false },
        { pubkey: accounts.program, isSigner: false, isWritable: false },
    ];
    const identifier = Buffer.from([163, 208, 20, 172, 223, 65, 255, 228]);
    const buffer = Buffer.alloc(1000);
    const len = exports.layout.encode({
        inputAmount: args.inputAmount,
        minOutputAmount: args.minOutputAmount,
        tipAmountPermissionlessTaking: args.tipAmountPermissionlessTaking,
    }, buffer);
    const data = Buffer.concat([identifier, buffer]).slice(0, 8 + len);
    const ix = new web3_js_1.TransactionInstruction({ keys, programId, data });
    return ix;
}
//# sourceMappingURL=takeOrder.js.map
import { PublicKey } from "@solana/web3.js";
import BN from "bn.js";
import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export type BoolFields = [boolean];
export type BoolValue = [boolean];
export interface BoolJSON {
    kind: "Bool";
    value: [boolean];
}
export declare class Bool {
    static readonly discriminator = 0;
    static readonly kind = "Bool";
    readonly discriminator = 0;
    readonly kind = "Bool";
    readonly value: BoolValue;
    constructor(value: BoolFields);
    toJSON(): BoolJSON;
    toEncodable(): {
        Bool: {
            _0: boolean;
        };
    };
}
export type U16Fields = [number];
export type U16Value = [number];
export interface U16JSON {
    kind: "U16";
    value: [number];
}
export declare class U16 {
    static readonly discriminator = 1;
    static readonly kind = "U16";
    readonly discriminator = 1;
    readonly kind = "U16";
    readonly value: U16Value;
    constructor(value: U16Fields);
    toJSON(): U16JSON;
    toEncodable(): {
        U16: {
            _0: number;
        };
    };
}
export type U64Fields = [BN];
export type U64Value = [BN];
export interface U64JSON {
    kind: "U64";
    value: [string];
}
export declare class U64 {
    static readonly discriminator = 2;
    static readonly kind = "U64";
    readonly discriminator = 2;
    readonly kind = "U64";
    readonly value: U64Value;
    constructor(value: U64Fields);
    toJSON(): U64JSON;
    toEncodable(): {
        U64: {
            _0: BN;
        };
    };
}
export type PubkeyFields = [PublicKey];
export type PubkeyValue = [PublicKey];
export interface PubkeyJSON {
    kind: "Pubkey";
    value: [string];
}
export declare class Pubkey {
    static readonly discriminator = 3;
    static readonly kind = "Pubkey";
    readonly discriminator = 3;
    readonly kind = "Pubkey";
    readonly value: PubkeyValue;
    constructor(value: PubkeyFields);
    toJSON(): PubkeyJSON;
    toEncodable(): {
        Pubkey: {
            _0: PublicKey;
        };
    };
}
export declare function fromDecoded(obj: any): types.UpdateGlobalConfigValueKind;
export declare function fromJSON(obj: types.UpdateGlobalConfigValueJSON): types.UpdateGlobalConfigValueKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=UpdateGlobalConfigValue.d.ts.map
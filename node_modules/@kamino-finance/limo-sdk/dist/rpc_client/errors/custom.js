"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidTokenAuthority = exports.InvalidTokenMint = exports.InvalidAccount = exports.InvalidTokenAccountOwner = exports.UninitializedTokenAccount = exports.OrderTypeInvalid = exports.InvalidTokenAccount = exports.UnsupportedTokenExtension = exports.OrderSameMint = exports.NotEnoughTimePassedSinceLastUpdate = exports.NotEnoughBalanceForRent = exports.IntermediaryOutputTokenAccountRequired = exports.MakerOutputAtaRequired = exports.InvalidAtaAddress = exports.PermissionDoesNotMatchOrder = exports.PermissionRequiredPermissionlessNotEnabled = exports.OrderInputAmountTooLarge = exports.OrderTakingBlocked = exports.CreatingNewOrdersBlocked = exports.EmergencyModeEnabled = exports.OrderNotWithinFlashOperation = exports.FlashIxsArgsMismatch = exports.FlashIxsAccountMismatch = exports.FlashIxsNotStarted = exports.FlashIxsNotEnded = exports.FlashTxWithUnexpectedIxs = exports.FlashTakeOrderBlocked = exports.CPINotAllowed = exports.OrderWithinFlashOperation = exports.InvalidHostTipBalance = exports.InvalidTipTransferAmount = exports.InvalidTipBalance = exports.IntegerOverflow = exports.InvalidHostFee = exports.OrderOutputAmountInvalid = exports.OrderInputAmountInvalid = exports.MathOverflow = exports.InvalidFlag = exports.OutOfRangeIntegralConversion = exports.InvalidOrderOwner = exports.InvalidConfigOption = exports.InvalidPdaAuthority = exports.InvalidAdminAuthority = exports.OrderNotActive = exports.OrderCanNotBeCanceled = void 0;
exports.fromCode = fromCode;
class OrderCanNotBeCanceled extends Error {
    logs;
    static code = 6000;
    code = 6000;
    name = "OrderCanNotBeCanceled";
    msg = "Order can't be canceled";
    constructor(logs) {
        super("6000: Order can't be canceled");
        this.logs = logs;
    }
}
exports.OrderCanNotBeCanceled = OrderCanNotBeCanceled;
class OrderNotActive extends Error {
    logs;
    static code = 6001;
    code = 6001;
    name = "OrderNotActive";
    msg = "Order not active";
    constructor(logs) {
        super("6001: Order not active");
        this.logs = logs;
    }
}
exports.OrderNotActive = OrderNotActive;
class InvalidAdminAuthority extends Error {
    logs;
    static code = 6002;
    code = 6002;
    name = "InvalidAdminAuthority";
    msg = "Invalid admin authority";
    constructor(logs) {
        super("6002: Invalid admin authority");
        this.logs = logs;
    }
}
exports.InvalidAdminAuthority = InvalidAdminAuthority;
class InvalidPdaAuthority extends Error {
    logs;
    static code = 6003;
    code = 6003;
    name = "InvalidPdaAuthority";
    msg = "Invalid pda authority";
    constructor(logs) {
        super("6003: Invalid pda authority");
        this.logs = logs;
    }
}
exports.InvalidPdaAuthority = InvalidPdaAuthority;
class InvalidConfigOption extends Error {
    logs;
    static code = 6004;
    code = 6004;
    name = "InvalidConfigOption";
    msg = "Invalid config option";
    constructor(logs) {
        super("6004: Invalid config option");
        this.logs = logs;
    }
}
exports.InvalidConfigOption = InvalidConfigOption;
class InvalidOrderOwner extends Error {
    logs;
    static code = 6005;
    code = 6005;
    name = "InvalidOrderOwner";
    msg = "Order owner account is not the order owner";
    constructor(logs) {
        super("6005: Order owner account is not the order owner");
        this.logs = logs;
    }
}
exports.InvalidOrderOwner = InvalidOrderOwner;
class OutOfRangeIntegralConversion extends Error {
    logs;
    static code = 6006;
    code = 6006;
    name = "OutOfRangeIntegralConversion";
    msg = "Out of range integral conversion attempted";
    constructor(logs) {
        super("6006: Out of range integral conversion attempted");
        this.logs = logs;
    }
}
exports.OutOfRangeIntegralConversion = OutOfRangeIntegralConversion;
class InvalidFlag extends Error {
    logs;
    static code = 6007;
    code = 6007;
    name = "InvalidFlag";
    msg = "Invalid boolean flag, valid values are 0 and 1";
    constructor(logs) {
        super("6007: Invalid boolean flag, valid values are 0 and 1");
        this.logs = logs;
    }
}
exports.InvalidFlag = InvalidFlag;
class MathOverflow extends Error {
    logs;
    static code = 6008;
    code = 6008;
    name = "MathOverflow";
    msg = "Mathematical operation with overflow";
    constructor(logs) {
        super("6008: Mathematical operation with overflow");
        this.logs = logs;
    }
}
exports.MathOverflow = MathOverflow;
class OrderInputAmountInvalid extends Error {
    logs;
    static code = 6009;
    code = 6009;
    name = "OrderInputAmountInvalid";
    msg = "Order input amount invalid";
    constructor(logs) {
        super("6009: Order input amount invalid");
        this.logs = logs;
    }
}
exports.OrderInputAmountInvalid = OrderInputAmountInvalid;
class OrderOutputAmountInvalid extends Error {
    logs;
    static code = 6010;
    code = 6010;
    name = "OrderOutputAmountInvalid";
    msg = "Order output amount invalid";
    constructor(logs) {
        super("6010: Order output amount invalid");
        this.logs = logs;
    }
}
exports.OrderOutputAmountInvalid = OrderOutputAmountInvalid;
class InvalidHostFee extends Error {
    logs;
    static code = 6011;
    code = 6011;
    name = "InvalidHostFee";
    msg = "Host fee bps must be between 0 and 10000";
    constructor(logs) {
        super("6011: Host fee bps must be between 0 and 10000");
        this.logs = logs;
    }
}
exports.InvalidHostFee = InvalidHostFee;
class IntegerOverflow extends Error {
    logs;
    static code = 6012;
    code = 6012;
    name = "IntegerOverflow";
    msg = "Conversion between integers failed";
    constructor(logs) {
        super("6012: Conversion between integers failed");
        this.logs = logs;
    }
}
exports.IntegerOverflow = IntegerOverflow;
class InvalidTipBalance extends Error {
    logs;
    static code = 6013;
    code = 6013;
    name = "InvalidTipBalance";
    msg = "Tip balance less than accounted tip";
    constructor(logs) {
        super("6013: Tip balance less than accounted tip");
        this.logs = logs;
    }
}
exports.InvalidTipBalance = InvalidTipBalance;
class InvalidTipTransferAmount extends Error {
    logs;
    static code = 6014;
    code = 6014;
    name = "InvalidTipTransferAmount";
    msg = "Tip transfer amount is less than expected";
    constructor(logs) {
        super("6014: Tip transfer amount is less than expected");
        this.logs = logs;
    }
}
exports.InvalidTipTransferAmount = InvalidTipTransferAmount;
class InvalidHostTipBalance extends Error {
    logs;
    static code = 6015;
    code = 6015;
    name = "InvalidHostTipBalance";
    msg = "Host tup amount is less than accounted for";
    constructor(logs) {
        super("6015: Host tup amount is less than accounted for");
        this.logs = logs;
    }
}
exports.InvalidHostTipBalance = InvalidHostTipBalance;
class OrderWithinFlashOperation extends Error {
    logs;
    static code = 6016;
    code = 6016;
    name = "OrderWithinFlashOperation";
    msg = "Order within flash operation - all otehr actions are blocked";
    constructor(logs) {
        super("6016: Order within flash operation - all otehr actions are blocked");
        this.logs = logs;
    }
}
exports.OrderWithinFlashOperation = OrderWithinFlashOperation;
class CPINotAllowed extends Error {
    logs;
    static code = 6017;
    code = 6017;
    name = "CPINotAllowed";
    msg = "CPI not allowed";
    constructor(logs) {
        super("6017: CPI not allowed");
        this.logs = logs;
    }
}
exports.CPINotAllowed = CPINotAllowed;
class FlashTakeOrderBlocked extends Error {
    logs;
    static code = 6018;
    code = 6018;
    name = "FlashTakeOrderBlocked";
    msg = "Flash take_order is blocked";
    constructor(logs) {
        super("6018: Flash take_order is blocked");
        this.logs = logs;
    }
}
exports.FlashTakeOrderBlocked = FlashTakeOrderBlocked;
class FlashTxWithUnexpectedIxs extends Error {
    logs;
    static code = 6019;
    code = 6019;
    name = "FlashTxWithUnexpectedIxs";
    msg = "Some unexpected instructions are present in the tx. Either before or after the flash ixs, or some ix target the same program between";
    constructor(logs) {
        super("6019: Some unexpected instructions are present in the tx. Either before or after the flash ixs, or some ix target the same program between");
        this.logs = logs;
    }
}
exports.FlashTxWithUnexpectedIxs = FlashTxWithUnexpectedIxs;
class FlashIxsNotEnded extends Error {
    logs;
    static code = 6020;
    code = 6020;
    name = "FlashIxsNotEnded";
    msg = "Flash ixs initiated without the closing ix in the transaction";
    constructor(logs) {
        super("6020: Flash ixs initiated without the closing ix in the transaction");
        this.logs = logs;
    }
}
exports.FlashIxsNotEnded = FlashIxsNotEnded;
class FlashIxsNotStarted extends Error {
    logs;
    static code = 6021;
    code = 6021;
    name = "FlashIxsNotStarted";
    msg = "Flash ixs ended without the starting ix in the transaction";
    constructor(logs) {
        super("6021: Flash ixs ended without the starting ix in the transaction");
        this.logs = logs;
    }
}
exports.FlashIxsNotStarted = FlashIxsNotStarted;
class FlashIxsAccountMismatch extends Error {
    logs;
    static code = 6022;
    code = 6022;
    name = "FlashIxsAccountMismatch";
    msg = "Some accounts differ between the two flash ixs";
    constructor(logs) {
        super("6022: Some accounts differ between the two flash ixs");
        this.logs = logs;
    }
}
exports.FlashIxsAccountMismatch = FlashIxsAccountMismatch;
class FlashIxsArgsMismatch extends Error {
    logs;
    static code = 6023;
    code = 6023;
    name = "FlashIxsArgsMismatch";
    msg = "Some args differ between the two flash ixs";
    constructor(logs) {
        super("6023: Some args differ between the two flash ixs");
        this.logs = logs;
    }
}
exports.FlashIxsArgsMismatch = FlashIxsArgsMismatch;
class OrderNotWithinFlashOperation extends Error {
    logs;
    static code = 6024;
    code = 6024;
    name = "OrderNotWithinFlashOperation";
    msg = "Order is not within flash operation";
    constructor(logs) {
        super("6024: Order is not within flash operation");
        this.logs = logs;
    }
}
exports.OrderNotWithinFlashOperation = OrderNotWithinFlashOperation;
class EmergencyModeEnabled extends Error {
    logs;
    static code = 6025;
    code = 6025;
    name = "EmergencyModeEnabled";
    msg = "Emergency mode is enabled";
    constructor(logs) {
        super("6025: Emergency mode is enabled");
        this.logs = logs;
    }
}
exports.EmergencyModeEnabled = EmergencyModeEnabled;
class CreatingNewOrdersBlocked extends Error {
    logs;
    static code = 6026;
    code = 6026;
    name = "CreatingNewOrdersBlocked";
    msg = "Creating new ordersis blocked";
    constructor(logs) {
        super("6026: Creating new ordersis blocked");
        this.logs = logs;
    }
}
exports.CreatingNewOrdersBlocked = CreatingNewOrdersBlocked;
class OrderTakingBlocked extends Error {
    logs;
    static code = 6027;
    code = 6027;
    name = "OrderTakingBlocked";
    msg = "Orders taking is blocked";
    constructor(logs) {
        super("6027: Orders taking is blocked");
        this.logs = logs;
    }
}
exports.OrderTakingBlocked = OrderTakingBlocked;
class OrderInputAmountTooLarge extends Error {
    logs;
    static code = 6028;
    code = 6028;
    name = "OrderInputAmountTooLarge";
    msg = "Order input amount larger than the remaining";
    constructor(logs) {
        super("6028: Order input amount larger than the remaining");
        this.logs = logs;
    }
}
exports.OrderInputAmountTooLarge = OrderInputAmountTooLarge;
class PermissionRequiredPermissionlessNotEnabled extends Error {
    logs;
    static code = 6029;
    code = 6029;
    name = "PermissionRequiredPermissionlessNotEnabled";
    msg = "Permissionless order taking not enabled, please provide permission account";
    constructor(logs) {
        super("6029: Permissionless order taking not enabled, please provide permission account");
        this.logs = logs;
    }
}
exports.PermissionRequiredPermissionlessNotEnabled = PermissionRequiredPermissionlessNotEnabled;
class PermissionDoesNotMatchOrder extends Error {
    logs;
    static code = 6030;
    code = 6030;
    name = "PermissionDoesNotMatchOrder";
    msg = "Permission address does not match order address";
    constructor(logs) {
        super("6030: Permission address does not match order address");
        this.logs = logs;
    }
}
exports.PermissionDoesNotMatchOrder = PermissionDoesNotMatchOrder;
class InvalidAtaAddress extends Error {
    logs;
    static code = 6031;
    code = 6031;
    name = "InvalidAtaAddress";
    msg = "Invalid ata address";
    constructor(logs) {
        super("6031: Invalid ata address");
        this.logs = logs;
    }
}
exports.InvalidAtaAddress = InvalidAtaAddress;
class MakerOutputAtaRequired extends Error {
    logs;
    static code = 6032;
    code = 6032;
    name = "MakerOutputAtaRequired";
    msg = "Maker output ata required when output mint is not WSOL";
    constructor(logs) {
        super("6032: Maker output ata required when output mint is not WSOL");
        this.logs = logs;
    }
}
exports.MakerOutputAtaRequired = MakerOutputAtaRequired;
class IntermediaryOutputTokenAccountRequired extends Error {
    logs;
    static code = 6033;
    code = 6033;
    name = "IntermediaryOutputTokenAccountRequired";
    msg = "Intermediary output token account required when output mint is WSOL";
    constructor(logs) {
        super("6033: Intermediary output token account required when output mint is WSOL");
        this.logs = logs;
    }
}
exports.IntermediaryOutputTokenAccountRequired = IntermediaryOutputTokenAccountRequired;
class NotEnoughBalanceForRent extends Error {
    logs;
    static code = 6034;
    code = 6034;
    name = "NotEnoughBalanceForRent";
    msg = "Not enough balance for rent";
    constructor(logs) {
        super("6034: Not enough balance for rent");
        this.logs = logs;
    }
}
exports.NotEnoughBalanceForRent = NotEnoughBalanceForRent;
class NotEnoughTimePassedSinceLastUpdate extends Error {
    logs;
    static code = 6035;
    code = 6035;
    name = "NotEnoughTimePassedSinceLastUpdate";
    msg = "Order can not be closed - Not enough time passed since last update";
    constructor(logs) {
        super("6035: Order can not be closed - Not enough time passed since last update");
        this.logs = logs;
    }
}
exports.NotEnoughTimePassedSinceLastUpdate = NotEnoughTimePassedSinceLastUpdate;
class OrderSameMint extends Error {
    logs;
    static code = 6036;
    code = 6036;
    name = "OrderSameMint";
    msg = "Order input and output mints are the same";
    constructor(logs) {
        super("6036: Order input and output mints are the same");
        this.logs = logs;
    }
}
exports.OrderSameMint = OrderSameMint;
class UnsupportedTokenExtension extends Error {
    logs;
    static code = 6037;
    code = 6037;
    name = "UnsupportedTokenExtension";
    msg = "Mint has a token (2022) extension that is not supported";
    constructor(logs) {
        super("6037: Mint has a token (2022) extension that is not supported");
        this.logs = logs;
    }
}
exports.UnsupportedTokenExtension = UnsupportedTokenExtension;
class InvalidTokenAccount extends Error {
    logs;
    static code = 6038;
    code = 6038;
    name = "InvalidTokenAccount";
    msg = "Can't have an spl token mint with a t22 account";
    constructor(logs) {
        super("6038: Can't have an spl token mint with a t22 account");
        this.logs = logs;
    }
}
exports.InvalidTokenAccount = InvalidTokenAccount;
class OrderTypeInvalid extends Error {
    logs;
    static code = 6039;
    code = 6039;
    name = "OrderTypeInvalid";
    msg = "The order type is invalid";
    constructor(logs) {
        super("6039: The order type is invalid");
        this.logs = logs;
    }
}
exports.OrderTypeInvalid = OrderTypeInvalid;
class UninitializedTokenAccount extends Error {
    logs;
    static code = 6040;
    code = 6040;
    name = "UninitializedTokenAccount";
    msg = "Token account is not initialized";
    constructor(logs) {
        super("6040: Token account is not initialized");
        this.logs = logs;
    }
}
exports.UninitializedTokenAccount = UninitializedTokenAccount;
class InvalidTokenAccountOwner extends Error {
    logs;
    static code = 6041;
    code = 6041;
    name = "InvalidTokenAccountOwner";
    msg = "Account is not owned by the token program";
    constructor(logs) {
        super("6041: Account is not owned by the token program");
        this.logs = logs;
    }
}
exports.InvalidTokenAccountOwner = InvalidTokenAccountOwner;
class InvalidAccount extends Error {
    logs;
    static code = 6042;
    code = 6042;
    name = "InvalidAccount";
    msg = "Account is not a valid token account";
    constructor(logs) {
        super("6042: Account is not a valid token account");
        this.logs = logs;
    }
}
exports.InvalidAccount = InvalidAccount;
class InvalidTokenMint extends Error {
    logs;
    static code = 6043;
    code = 6043;
    name = "InvalidTokenMint";
    msg = "Token account has incorrect mint";
    constructor(logs) {
        super("6043: Token account has incorrect mint");
        this.logs = logs;
    }
}
exports.InvalidTokenMint = InvalidTokenMint;
class InvalidTokenAuthority extends Error {
    logs;
    static code = 6044;
    code = 6044;
    name = "InvalidTokenAuthority";
    msg = "Token account has incorrect authority";
    constructor(logs) {
        super("6044: Token account has incorrect authority");
        this.logs = logs;
    }
}
exports.InvalidTokenAuthority = InvalidTokenAuthority;
function fromCode(code, logs) {
    switch (code) {
        case 6000:
            return new OrderCanNotBeCanceled(logs);
        case 6001:
            return new OrderNotActive(logs);
        case 6002:
            return new InvalidAdminAuthority(logs);
        case 6003:
            return new InvalidPdaAuthority(logs);
        case 6004:
            return new InvalidConfigOption(logs);
        case 6005:
            return new InvalidOrderOwner(logs);
        case 6006:
            return new OutOfRangeIntegralConversion(logs);
        case 6007:
            return new InvalidFlag(logs);
        case 6008:
            return new MathOverflow(logs);
        case 6009:
            return new OrderInputAmountInvalid(logs);
        case 6010:
            return new OrderOutputAmountInvalid(logs);
        case 6011:
            return new InvalidHostFee(logs);
        case 6012:
            return new IntegerOverflow(logs);
        case 6013:
            return new InvalidTipBalance(logs);
        case 6014:
            return new InvalidTipTransferAmount(logs);
        case 6015:
            return new InvalidHostTipBalance(logs);
        case 6016:
            return new OrderWithinFlashOperation(logs);
        case 6017:
            return new CPINotAllowed(logs);
        case 6018:
            return new FlashTakeOrderBlocked(logs);
        case 6019:
            return new FlashTxWithUnexpectedIxs(logs);
        case 6020:
            return new FlashIxsNotEnded(logs);
        case 6021:
            return new FlashIxsNotStarted(logs);
        case 6022:
            return new FlashIxsAccountMismatch(logs);
        case 6023:
            return new FlashIxsArgsMismatch(logs);
        case 6024:
            return new OrderNotWithinFlashOperation(logs);
        case 6025:
            return new EmergencyModeEnabled(logs);
        case 6026:
            return new CreatingNewOrdersBlocked(logs);
        case 6027:
            return new OrderTakingBlocked(logs);
        case 6028:
            return new OrderInputAmountTooLarge(logs);
        case 6029:
            return new PermissionRequiredPermissionlessNotEnabled(logs);
        case 6030:
            return new PermissionDoesNotMatchOrder(logs);
        case 6031:
            return new InvalidAtaAddress(logs);
        case 6032:
            return new MakerOutputAtaRequired(logs);
        case 6033:
            return new IntermediaryOutputTokenAccountRequired(logs);
        case 6034:
            return new NotEnoughBalanceForRent(logs);
        case 6035:
            return new NotEnoughTimePassedSinceLastUpdate(logs);
        case 6036:
            return new OrderSameMint(logs);
        case 6037:
            return new UnsupportedTokenExtension(logs);
        case 6038:
            return new InvalidTokenAccount(logs);
        case 6039:
            return new OrderTypeInvalid(logs);
        case 6040:
            return new UninitializedTokenAccount(logs);
        case 6041:
            return new InvalidTokenAccountOwner(logs);
        case 6042:
            return new InvalidAccount(logs);
        case 6043:
            return new InvalidTokenMint(logs);
        case 6044:
            return new InvalidTokenAuthority(logs);
    }
    return null;
}
//# sourceMappingURL=custom.js.map
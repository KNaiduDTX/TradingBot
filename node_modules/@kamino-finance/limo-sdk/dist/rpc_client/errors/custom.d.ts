export type CustomError = OrderCanNotBeCanceled | OrderNotActive | InvalidAdminAuthority | InvalidPdaAuthority | InvalidConfigOption | InvalidOrderOwner | OutOfRangeIntegralConversion | InvalidFlag | MathOverflow | OrderInputAmountInvalid | OrderOutputAmountInvalid | InvalidHostFee | IntegerOverflow | InvalidTipBalance | InvalidTipTransferAmount | InvalidHostTipBalance | OrderWithinFlashOperation | CPINotAllowed | FlashTakeOrderBlocked | FlashTxWithUnexpectedIxs | FlashIxsNotEnded | FlashIxsNotStarted | FlashIxsAccountMismatch | FlashIxsArgsMismatch | OrderNotWithinFlashOperation | EmergencyModeEnabled | CreatingNewOrdersBlocked | OrderTakingBlocked | OrderInputAmountTooLarge | PermissionRequiredPermissionlessNotEnabled | PermissionDoesNotMatchOrder | InvalidAtaAddress | MakerOutputAtaRequired | IntermediaryOutputTokenAccountRequired | NotEnoughBalanceForRent | NotEnoughTimePassedSinceLastUpdate | OrderSameMint | UnsupportedTokenExtension | InvalidTokenAccount | OrderTypeInvalid | UninitializedTokenAccount | InvalidTokenAccountOwner | InvalidAccount | InvalidTokenMint | InvalidTokenAuthority;
export declare class OrderCanNotBeCanceled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6000;
    readonly code = 6000;
    readonly name = "OrderCanNotBeCanceled";
    readonly msg = "Order can't be canceled";
    constructor(logs?: string[] | undefined);
}
export declare class OrderNotActive extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6001;
    readonly code = 6001;
    readonly name = "OrderNotActive";
    readonly msg = "Order not active";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAdminAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6002;
    readonly code = 6002;
    readonly name = "InvalidAdminAuthority";
    readonly msg = "Invalid admin authority";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidPdaAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6003;
    readonly code = 6003;
    readonly name = "InvalidPdaAuthority";
    readonly msg = "Invalid pda authority";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidConfigOption extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6004;
    readonly code = 6004;
    readonly name = "InvalidConfigOption";
    readonly msg = "Invalid config option";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidOrderOwner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6005;
    readonly code = 6005;
    readonly name = "InvalidOrderOwner";
    readonly msg = "Order owner account is not the order owner";
    constructor(logs?: string[] | undefined);
}
export declare class OutOfRangeIntegralConversion extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6006;
    readonly code = 6006;
    readonly name = "OutOfRangeIntegralConversion";
    readonly msg = "Out of range integral conversion attempted";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidFlag extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6007;
    readonly code = 6007;
    readonly name = "InvalidFlag";
    readonly msg = "Invalid boolean flag, valid values are 0 and 1";
    constructor(logs?: string[] | undefined);
}
export declare class MathOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6008;
    readonly code = 6008;
    readonly name = "MathOverflow";
    readonly msg = "Mathematical operation with overflow";
    constructor(logs?: string[] | undefined);
}
export declare class OrderInputAmountInvalid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6009;
    readonly code = 6009;
    readonly name = "OrderInputAmountInvalid";
    readonly msg = "Order input amount invalid";
    constructor(logs?: string[] | undefined);
}
export declare class OrderOutputAmountInvalid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6010;
    readonly code = 6010;
    readonly name = "OrderOutputAmountInvalid";
    readonly msg = "Order output amount invalid";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidHostFee extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6011;
    readonly code = 6011;
    readonly name = "InvalidHostFee";
    readonly msg = "Host fee bps must be between 0 and 10000";
    constructor(logs?: string[] | undefined);
}
export declare class IntegerOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6012;
    readonly code = 6012;
    readonly name = "IntegerOverflow";
    readonly msg = "Conversion between integers failed";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTipBalance extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6013;
    readonly code = 6013;
    readonly name = "InvalidTipBalance";
    readonly msg = "Tip balance less than accounted tip";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTipTransferAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6014;
    readonly code = 6014;
    readonly name = "InvalidTipTransferAmount";
    readonly msg = "Tip transfer amount is less than expected";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidHostTipBalance extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6015;
    readonly code = 6015;
    readonly name = "InvalidHostTipBalance";
    readonly msg = "Host tup amount is less than accounted for";
    constructor(logs?: string[] | undefined);
}
export declare class OrderWithinFlashOperation extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6016;
    readonly code = 6016;
    readonly name = "OrderWithinFlashOperation";
    readonly msg = "Order within flash operation - all otehr actions are blocked";
    constructor(logs?: string[] | undefined);
}
export declare class CPINotAllowed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6017;
    readonly code = 6017;
    readonly name = "CPINotAllowed";
    readonly msg = "CPI not allowed";
    constructor(logs?: string[] | undefined);
}
export declare class FlashTakeOrderBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6018;
    readonly code = 6018;
    readonly name = "FlashTakeOrderBlocked";
    readonly msg = "Flash take_order is blocked";
    constructor(logs?: string[] | undefined);
}
export declare class FlashTxWithUnexpectedIxs extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6019;
    readonly code = 6019;
    readonly name = "FlashTxWithUnexpectedIxs";
    readonly msg = "Some unexpected instructions are present in the tx. Either before or after the flash ixs, or some ix target the same program between";
    constructor(logs?: string[] | undefined);
}
export declare class FlashIxsNotEnded extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6020;
    readonly code = 6020;
    readonly name = "FlashIxsNotEnded";
    readonly msg = "Flash ixs initiated without the closing ix in the transaction";
    constructor(logs?: string[] | undefined);
}
export declare class FlashIxsNotStarted extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6021;
    readonly code = 6021;
    readonly name = "FlashIxsNotStarted";
    readonly msg = "Flash ixs ended without the starting ix in the transaction";
    constructor(logs?: string[] | undefined);
}
export declare class FlashIxsAccountMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6022;
    readonly code = 6022;
    readonly name = "FlashIxsAccountMismatch";
    readonly msg = "Some accounts differ between the two flash ixs";
    constructor(logs?: string[] | undefined);
}
export declare class FlashIxsArgsMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6023;
    readonly code = 6023;
    readonly name = "FlashIxsArgsMismatch";
    readonly msg = "Some args differ between the two flash ixs";
    constructor(logs?: string[] | undefined);
}
export declare class OrderNotWithinFlashOperation extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6024;
    readonly code = 6024;
    readonly name = "OrderNotWithinFlashOperation";
    readonly msg = "Order is not within flash operation";
    constructor(logs?: string[] | undefined);
}
export declare class EmergencyModeEnabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6025;
    readonly code = 6025;
    readonly name = "EmergencyModeEnabled";
    readonly msg = "Emergency mode is enabled";
    constructor(logs?: string[] | undefined);
}
export declare class CreatingNewOrdersBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6026;
    readonly code = 6026;
    readonly name = "CreatingNewOrdersBlocked";
    readonly msg = "Creating new ordersis blocked";
    constructor(logs?: string[] | undefined);
}
export declare class OrderTakingBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6027;
    readonly code = 6027;
    readonly name = "OrderTakingBlocked";
    readonly msg = "Orders taking is blocked";
    constructor(logs?: string[] | undefined);
}
export declare class OrderInputAmountTooLarge extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6028;
    readonly code = 6028;
    readonly name = "OrderInputAmountTooLarge";
    readonly msg = "Order input amount larger than the remaining";
    constructor(logs?: string[] | undefined);
}
export declare class PermissionRequiredPermissionlessNotEnabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6029;
    readonly code = 6029;
    readonly name = "PermissionRequiredPermissionlessNotEnabled";
    readonly msg = "Permissionless order taking not enabled, please provide permission account";
    constructor(logs?: string[] | undefined);
}
export declare class PermissionDoesNotMatchOrder extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6030;
    readonly code = 6030;
    readonly name = "PermissionDoesNotMatchOrder";
    readonly msg = "Permission address does not match order address";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAtaAddress extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6031;
    readonly code = 6031;
    readonly name = "InvalidAtaAddress";
    readonly msg = "Invalid ata address";
    constructor(logs?: string[] | undefined);
}
export declare class MakerOutputAtaRequired extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6032;
    readonly code = 6032;
    readonly name = "MakerOutputAtaRequired";
    readonly msg = "Maker output ata required when output mint is not WSOL";
    constructor(logs?: string[] | undefined);
}
export declare class IntermediaryOutputTokenAccountRequired extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6033;
    readonly code = 6033;
    readonly name = "IntermediaryOutputTokenAccountRequired";
    readonly msg = "Intermediary output token account required when output mint is WSOL";
    constructor(logs?: string[] | undefined);
}
export declare class NotEnoughBalanceForRent extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6034;
    readonly code = 6034;
    readonly name = "NotEnoughBalanceForRent";
    readonly msg = "Not enough balance for rent";
    constructor(logs?: string[] | undefined);
}
export declare class NotEnoughTimePassedSinceLastUpdate extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6035;
    readonly code = 6035;
    readonly name = "NotEnoughTimePassedSinceLastUpdate";
    readonly msg = "Order can not be closed - Not enough time passed since last update";
    constructor(logs?: string[] | undefined);
}
export declare class OrderSameMint extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6036;
    readonly code = 6036;
    readonly name = "OrderSameMint";
    readonly msg = "Order input and output mints are the same";
    constructor(logs?: string[] | undefined);
}
export declare class UnsupportedTokenExtension extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6037;
    readonly code = 6037;
    readonly name = "UnsupportedTokenExtension";
    readonly msg = "Mint has a token (2022) extension that is not supported";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTokenAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6038;
    readonly code = 6038;
    readonly name = "InvalidTokenAccount";
    readonly msg = "Can't have an spl token mint with a t22 account";
    constructor(logs?: string[] | undefined);
}
export declare class OrderTypeInvalid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6039;
    readonly code = 6039;
    readonly name = "OrderTypeInvalid";
    readonly msg = "The order type is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class UninitializedTokenAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6040;
    readonly code = 6040;
    readonly name = "UninitializedTokenAccount";
    readonly msg = "Token account is not initialized";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTokenAccountOwner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6041;
    readonly code = 6041;
    readonly name = "InvalidTokenAccountOwner";
    readonly msg = "Account is not owned by the token program";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6042;
    readonly code = 6042;
    readonly name = "InvalidAccount";
    readonly msg = "Account is not a valid token account";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTokenMint extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6043;
    readonly code = 6043;
    readonly name = "InvalidTokenMint";
    readonly msg = "Token account has incorrect mint";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTokenAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6044;
    readonly code = 6044;
    readonly name = "InvalidTokenAuthority";
    readonly msg = "Token account has incorrect authority";
    constructor(logs?: string[] | undefined);
}
export declare function fromCode(code: number, logs?: string[]): CustomError | null;
//# sourceMappingURL=custom.d.ts.map
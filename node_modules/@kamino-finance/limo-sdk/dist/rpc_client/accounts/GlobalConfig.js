"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalConfig = void 0;
const web3_js_1 = require("@solana/web3.js");
const bn_js_1 = __importDefault(require("bn.js")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const programId_1 = require("../programId");
class GlobalConfig {
    emergencyMode;
    flashTakeOrderBlocked;
    newOrdersBlocked;
    ordersTakingBlocked;
    hostFeeBps;
    isOrderTakingPermissionless;
    padding0;
    /** The number of seconds after an order has been updated before it can be closed */
    orderCloseDelaySeconds;
    padding1;
    /**
     * The total amount of lamports that were present in the pda_authority last
     * time a program instructions which alters the pda_authority account was
     * executed
     */
    pdaAuthorityPreviousLamportsBalance;
    /**
     * The total amount of tips that have been paid out - should be at least
     * as much as the total lamports present in the pda_authority account
     */
    totalTipAmount;
    /**
     * The amount of tips the host is due to receive -
     * in lamports, stored in the pda_authority account
     */
    hostTipAmount;
    pdaAuthority;
    pdaAuthorityBump;
    adminAuthority;
    adminAuthorityCached;
    txnFeeCost;
    ataCreationCost;
    padding2;
    static discriminator = Buffer.from([
        149, 8, 156, 202, 160, 252, 176, 217,
    ]);
    static layout = borsh.struct([
        borsh.u8("emergencyMode"),
        borsh.u8("flashTakeOrderBlocked"),
        borsh.u8("newOrdersBlocked"),
        borsh.u8("ordersTakingBlocked"),
        borsh.u16("hostFeeBps"),
        borsh.u8("isOrderTakingPermissionless"),
        borsh.array(borsh.u8(), 1, "padding0"),
        borsh.u64("orderCloseDelaySeconds"),
        borsh.array(borsh.u64(), 9, "padding1"),
        borsh.u64("pdaAuthorityPreviousLamportsBalance"),
        borsh.u64("totalTipAmount"),
        borsh.u64("hostTipAmount"),
        borsh.publicKey("pdaAuthority"),
        borsh.u64("pdaAuthorityBump"),
        borsh.publicKey("adminAuthority"),
        borsh.publicKey("adminAuthorityCached"),
        borsh.u64("txnFeeCost"),
        borsh.u64("ataCreationCost"),
        borsh.array(borsh.u64(), 241, "padding2"),
    ]);
    constructor(fields) {
        this.emergencyMode = fields.emergencyMode;
        this.flashTakeOrderBlocked = fields.flashTakeOrderBlocked;
        this.newOrdersBlocked = fields.newOrdersBlocked;
        this.ordersTakingBlocked = fields.ordersTakingBlocked;
        this.hostFeeBps = fields.hostFeeBps;
        this.isOrderTakingPermissionless = fields.isOrderTakingPermissionless;
        this.padding0 = fields.padding0;
        this.orderCloseDelaySeconds = fields.orderCloseDelaySeconds;
        this.padding1 = fields.padding1;
        this.pdaAuthorityPreviousLamportsBalance =
            fields.pdaAuthorityPreviousLamportsBalance;
        this.totalTipAmount = fields.totalTipAmount;
        this.hostTipAmount = fields.hostTipAmount;
        this.pdaAuthority = fields.pdaAuthority;
        this.pdaAuthorityBump = fields.pdaAuthorityBump;
        this.adminAuthority = fields.adminAuthority;
        this.adminAuthorityCached = fields.adminAuthorityCached;
        this.txnFeeCost = fields.txnFeeCost;
        this.ataCreationCost = fields.ataCreationCost;
        this.padding2 = fields.padding2;
    }
    static async fetch(c, address, programId = programId_1.PROGRAM_ID) {
        const info = await c.getAccountInfo(address);
        if (info === null) {
            return null;
        }
        if (!info.owner.equals(programId)) {
            throw new Error("account doesn't belong to this program");
        }
        return this.decode(info.data);
    }
    static async fetchMultiple(c, addresses, programId = programId_1.PROGRAM_ID) {
        const infos = await c.getMultipleAccountsInfo(addresses);
        return infos.map((info) => {
            if (info === null) {
                return null;
            }
            if (!info.owner.equals(programId)) {
                throw new Error("account doesn't belong to this program");
            }
            return this.decode(info.data);
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(GlobalConfig.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = GlobalConfig.layout.decode(data.slice(8));
        return new GlobalConfig({
            emergencyMode: dec.emergencyMode,
            flashTakeOrderBlocked: dec.flashTakeOrderBlocked,
            newOrdersBlocked: dec.newOrdersBlocked,
            ordersTakingBlocked: dec.ordersTakingBlocked,
            hostFeeBps: dec.hostFeeBps,
            isOrderTakingPermissionless: dec.isOrderTakingPermissionless,
            padding0: dec.padding0,
            orderCloseDelaySeconds: dec.orderCloseDelaySeconds,
            padding1: dec.padding1,
            pdaAuthorityPreviousLamportsBalance: dec.pdaAuthorityPreviousLamportsBalance,
            totalTipAmount: dec.totalTipAmount,
            hostTipAmount: dec.hostTipAmount,
            pdaAuthority: dec.pdaAuthority,
            pdaAuthorityBump: dec.pdaAuthorityBump,
            adminAuthority: dec.adminAuthority,
            adminAuthorityCached: dec.adminAuthorityCached,
            txnFeeCost: dec.txnFeeCost,
            ataCreationCost: dec.ataCreationCost,
            padding2: dec.padding2,
        });
    }
    toJSON() {
        return {
            emergencyMode: this.emergencyMode,
            flashTakeOrderBlocked: this.flashTakeOrderBlocked,
            newOrdersBlocked: this.newOrdersBlocked,
            ordersTakingBlocked: this.ordersTakingBlocked,
            hostFeeBps: this.hostFeeBps,
            isOrderTakingPermissionless: this.isOrderTakingPermissionless,
            padding0: this.padding0,
            orderCloseDelaySeconds: this.orderCloseDelaySeconds.toString(),
            padding1: this.padding1.map((item) => item.toString()),
            pdaAuthorityPreviousLamportsBalance: this.pdaAuthorityPreviousLamportsBalance.toString(),
            totalTipAmount: this.totalTipAmount.toString(),
            hostTipAmount: this.hostTipAmount.toString(),
            pdaAuthority: this.pdaAuthority.toString(),
            pdaAuthorityBump: this.pdaAuthorityBump.toString(),
            adminAuthority: this.adminAuthority.toString(),
            adminAuthorityCached: this.adminAuthorityCached.toString(),
            txnFeeCost: this.txnFeeCost.toString(),
            ataCreationCost: this.ataCreationCost.toString(),
            padding2: this.padding2.map((item) => item.toString()),
        };
    }
    static fromJSON(obj) {
        return new GlobalConfig({
            emergencyMode: obj.emergencyMode,
            flashTakeOrderBlocked: obj.flashTakeOrderBlocked,
            newOrdersBlocked: obj.newOrdersBlocked,
            ordersTakingBlocked: obj.ordersTakingBlocked,
            hostFeeBps: obj.hostFeeBps,
            isOrderTakingPermissionless: obj.isOrderTakingPermissionless,
            padding0: obj.padding0,
            orderCloseDelaySeconds: new bn_js_1.default(obj.orderCloseDelaySeconds),
            padding1: obj.padding1.map((item) => new bn_js_1.default(item)),
            pdaAuthorityPreviousLamportsBalance: new bn_js_1.default(obj.pdaAuthorityPreviousLamportsBalance),
            totalTipAmount: new bn_js_1.default(obj.totalTipAmount),
            hostTipAmount: new bn_js_1.default(obj.hostTipAmount),
            pdaAuthority: new web3_js_1.PublicKey(obj.pdaAuthority),
            pdaAuthorityBump: new bn_js_1.default(obj.pdaAuthorityBump),
            adminAuthority: new web3_js_1.PublicKey(obj.adminAuthority),
            adminAuthorityCached: new web3_js_1.PublicKey(obj.adminAuthorityCached),
            txnFeeCost: new bn_js_1.default(obj.txnFeeCost),
            ataCreationCost: new bn_js_1.default(obj.ataCreationCost),
            padding2: obj.padding2.map((item) => new bn_js_1.default(item)),
        });
    }
}
exports.GlobalConfig = GlobalConfig;
//# sourceMappingURL=GlobalConfig.js.map
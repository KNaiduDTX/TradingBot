import { PublicKey, Connection } from "@solana/web3.js";
import BN from "bn.js";
export interface GlobalConfigFields {
    emergencyMode: number;
    flashTakeOrderBlocked: number;
    newOrdersBlocked: number;
    ordersTakingBlocked: number;
    hostFeeBps: number;
    isOrderTakingPermissionless: number;
    padding0: Array<number>;
    /** The number of seconds after an order has been updated before it can be closed */
    orderCloseDelaySeconds: BN;
    padding1: Array<BN>;
    /**
     * The total amount of lamports that were present in the pda_authority last
     * time a program instructions which alters the pda_authority account was
     * executed
     */
    pdaAuthorityPreviousLamportsBalance: BN;
    /**
     * The total amount of tips that have been paid out - should be at least
     * as much as the total lamports present in the pda_authority account
     */
    totalTipAmount: BN;
    /**
     * The amount of tips the host is due to receive -
     * in lamports, stored in the pda_authority account
     */
    hostTipAmount: BN;
    pdaAuthority: PublicKey;
    pdaAuthorityBump: BN;
    adminAuthority: PublicKey;
    adminAuthorityCached: PublicKey;
    txnFeeCost: BN;
    ataCreationCost: BN;
    padding2: Array<BN>;
}
export interface GlobalConfigJSON {
    emergencyMode: number;
    flashTakeOrderBlocked: number;
    newOrdersBlocked: number;
    ordersTakingBlocked: number;
    hostFeeBps: number;
    isOrderTakingPermissionless: number;
    padding0: Array<number>;
    /** The number of seconds after an order has been updated before it can be closed */
    orderCloseDelaySeconds: string;
    padding1: Array<string>;
    /**
     * The total amount of lamports that were present in the pda_authority last
     * time a program instructions which alters the pda_authority account was
     * executed
     */
    pdaAuthorityPreviousLamportsBalance: string;
    /**
     * The total amount of tips that have been paid out - should be at least
     * as much as the total lamports present in the pda_authority account
     */
    totalTipAmount: string;
    /**
     * The amount of tips the host is due to receive -
     * in lamports, stored in the pda_authority account
     */
    hostTipAmount: string;
    pdaAuthority: string;
    pdaAuthorityBump: string;
    adminAuthority: string;
    adminAuthorityCached: string;
    txnFeeCost: string;
    ataCreationCost: string;
    padding2: Array<string>;
}
export declare class GlobalConfig {
    readonly emergencyMode: number;
    readonly flashTakeOrderBlocked: number;
    readonly newOrdersBlocked: number;
    readonly ordersTakingBlocked: number;
    readonly hostFeeBps: number;
    readonly isOrderTakingPermissionless: number;
    readonly padding0: Array<number>;
    /** The number of seconds after an order has been updated before it can be closed */
    readonly orderCloseDelaySeconds: BN;
    readonly padding1: Array<BN>;
    /**
     * The total amount of lamports that were present in the pda_authority last
     * time a program instructions which alters the pda_authority account was
     * executed
     */
    readonly pdaAuthorityPreviousLamportsBalance: BN;
    /**
     * The total amount of tips that have been paid out - should be at least
     * as much as the total lamports present in the pda_authority account
     */
    readonly totalTipAmount: BN;
    /**
     * The amount of tips the host is due to receive -
     * in lamports, stored in the pda_authority account
     */
    readonly hostTipAmount: BN;
    readonly pdaAuthority: PublicKey;
    readonly pdaAuthorityBump: BN;
    readonly adminAuthority: PublicKey;
    readonly adminAuthorityCached: PublicKey;
    readonly txnFeeCost: BN;
    readonly ataCreationCost: BN;
    readonly padding2: Array<BN>;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: GlobalConfigFields);
    static fetch(c: Connection, address: PublicKey, programId?: PublicKey): Promise<GlobalConfig | null>;
    static fetchMultiple(c: Connection, addresses: PublicKey[], programId?: PublicKey): Promise<Array<GlobalConfig | null>>;
    static decode(data: Buffer): GlobalConfig;
    toJSON(): GlobalConfigJSON;
    static fromJSON(obj: GlobalConfigJSON): GlobalConfig;
}
//# sourceMappingURL=GlobalConfig.d.ts.map
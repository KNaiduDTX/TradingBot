import { PublicKey, Connection } from "@solana/web3.js";
import BN from "bn.js";
export interface UserSwapBalancesStateFields {
    userLamports: BN;
    inputTaBalance: BN;
    outputTaBalance: BN;
}
export interface UserSwapBalancesStateJSON {
    userLamports: string;
    inputTaBalance: string;
    outputTaBalance: string;
}
export declare class UserSwapBalancesState {
    readonly userLamports: BN;
    readonly inputTaBalance: BN;
    readonly outputTaBalance: BN;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: UserSwapBalancesStateFields);
    static fetch(c: Connection, address: PublicKey, programId?: PublicKey): Promise<UserSwapBalancesState | null>;
    static fetchMultiple(c: Connection, addresses: PublicKey[], programId?: PublicKey): Promise<Array<UserSwapBalancesState | null>>;
    static decode(data: Buffer): UserSwapBalancesState;
    toJSON(): UserSwapBalancesStateJSON;
    static fromJSON(obj: UserSwapBalancesStateJSON): UserSwapBalancesState;
}
//# sourceMappingURL=UserSwapBalancesState.d.ts.map
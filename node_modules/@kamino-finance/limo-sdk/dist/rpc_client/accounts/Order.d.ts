import { PublicKey, Connection } from "@solana/web3.js";
import BN from "bn.js";
export interface OrderFields {
    globalConfig: PublicKey;
    maker: PublicKey;
    inputMint: PublicKey;
    inputMintProgramId: PublicKey;
    outputMint: PublicKey;
    outputMintProgramId: PublicKey;
    /** The amount of input token the maker wants to swap */
    initialInputAmount: BN;
    /** The amount of output token the maker wants to receive */
    expectedOutputAmount: BN;
    /** The amount of input token remaining to be swapped */
    remainingInputAmount: BN;
    /** The amount of output token that the maker has received so far */
    filledOutputAmount: BN;
    /**
     * The amount of tips the maker is due to receive for this order -
     * in lamports, stored in the pda_authority account
     */
    tipAmount: BN;
    /** The number of times the order has been filled */
    numberOfFills: BN;
    orderType: number;
    status: number;
    inVaultBump: number;
    /**
     * This is normally set to 0, but can be set to 1 to indicate that the
     * order is part of a flash operation, in whcih case the order can not be
     * modified until the flash operation is completed.
     */
    flashIxLock: number;
    padding0: Array<number>;
    lastUpdatedTimestamp: BN;
    /**
     * This is only used for flash operations, and is set to the blanance on the start
     * operation, and than back to 0 on the end operation. It is used to compute the difference
     * between start and end balances in order to compute the amount received from a potential swap
     */
    flashStartTakerOutputBalance: BN;
    padding: Array<BN>;
}
export interface OrderJSON {
    globalConfig: string;
    maker: string;
    inputMint: string;
    inputMintProgramId: string;
    outputMint: string;
    outputMintProgramId: string;
    /** The amount of input token the maker wants to swap */
    initialInputAmount: string;
    /** The amount of output token the maker wants to receive */
    expectedOutputAmount: string;
    /** The amount of input token remaining to be swapped */
    remainingInputAmount: string;
    /** The amount of output token that the maker has received so far */
    filledOutputAmount: string;
    /**
     * The amount of tips the maker is due to receive for this order -
     * in lamports, stored in the pda_authority account
     */
    tipAmount: string;
    /** The number of times the order has been filled */
    numberOfFills: string;
    orderType: number;
    status: number;
    inVaultBump: number;
    /**
     * This is normally set to 0, but can be set to 1 to indicate that the
     * order is part of a flash operation, in whcih case the order can not be
     * modified until the flash operation is completed.
     */
    flashIxLock: number;
    padding0: Array<number>;
    lastUpdatedTimestamp: string;
    /**
     * This is only used for flash operations, and is set to the blanance on the start
     * operation, and than back to 0 on the end operation. It is used to compute the difference
     * between start and end balances in order to compute the amount received from a potential swap
     */
    flashStartTakerOutputBalance: string;
    padding: Array<string>;
}
export declare class Order {
    readonly globalConfig: PublicKey;
    readonly maker: PublicKey;
    readonly inputMint: PublicKey;
    readonly inputMintProgramId: PublicKey;
    readonly outputMint: PublicKey;
    readonly outputMintProgramId: PublicKey;
    /** The amount of input token the maker wants to swap */
    readonly initialInputAmount: BN;
    /** The amount of output token the maker wants to receive */
    readonly expectedOutputAmount: BN;
    /** The amount of input token remaining to be swapped */
    readonly remainingInputAmount: BN;
    /** The amount of output token that the maker has received so far */
    readonly filledOutputAmount: BN;
    /**
     * The amount of tips the maker is due to receive for this order -
     * in lamports, stored in the pda_authority account
     */
    readonly tipAmount: BN;
    /** The number of times the order has been filled */
    readonly numberOfFills: BN;
    readonly orderType: number;
    readonly status: number;
    readonly inVaultBump: number;
    /**
     * This is normally set to 0, but can be set to 1 to indicate that the
     * order is part of a flash operation, in whcih case the order can not be
     * modified until the flash operation is completed.
     */
    readonly flashIxLock: number;
    readonly padding0: Array<number>;
    readonly lastUpdatedTimestamp: BN;
    /**
     * This is only used for flash operations, and is set to the blanance on the start
     * operation, and than back to 0 on the end operation. It is used to compute the difference
     * between start and end balances in order to compute the amount received from a potential swap
     */
    readonly flashStartTakerOutputBalance: BN;
    readonly padding: Array<BN>;
    static readonly discriminator: Buffer;
    static readonly layout: any;
    constructor(fields: OrderFields);
    static fetch(c: Connection, address: PublicKey, programId?: PublicKey): Promise<Order | null>;
    static fetchMultiple(c: Connection, addresses: PublicKey[], programId?: PublicKey): Promise<Array<Order | null>>;
    static decode(data: Buffer): Order;
    toJSON(): OrderJSON;
    static fromJSON(obj: OrderJSON): Order;
}
//# sourceMappingURL=Order.d.ts.map
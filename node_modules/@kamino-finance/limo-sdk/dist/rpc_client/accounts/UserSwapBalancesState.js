"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserSwapBalancesState = void 0;
const bn_js_1 = __importDefault(require("bn.js")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const programId_1 = require("../programId");
class UserSwapBalancesState {
    userLamports;
    inputTaBalance;
    outputTaBalance;
    static discriminator = Buffer.from([
        140, 228, 152, 62, 231, 27, 245, 198,
    ]);
    static layout = borsh.struct([
        borsh.u64("userLamports"),
        borsh.u64("inputTaBalance"),
        borsh.u64("outputTaBalance"),
    ]);
    constructor(fields) {
        this.userLamports = fields.userLamports;
        this.inputTaBalance = fields.inputTaBalance;
        this.outputTaBalance = fields.outputTaBalance;
    }
    static async fetch(c, address, programId = programId_1.PROGRAM_ID) {
        const info = await c.getAccountInfo(address);
        if (info === null) {
            return null;
        }
        if (!info.owner.equals(programId)) {
            throw new Error("account doesn't belong to this program");
        }
        return this.decode(info.data);
    }
    static async fetchMultiple(c, addresses, programId = programId_1.PROGRAM_ID) {
        const infos = await c.getMultipleAccountsInfo(addresses);
        return infos.map((info) => {
            if (info === null) {
                return null;
            }
            if (!info.owner.equals(programId)) {
                throw new Error("account doesn't belong to this program");
            }
            return this.decode(info.data);
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(UserSwapBalancesState.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = UserSwapBalancesState.layout.decode(data.slice(8));
        return new UserSwapBalancesState({
            userLamports: dec.userLamports,
            inputTaBalance: dec.inputTaBalance,
            outputTaBalance: dec.outputTaBalance,
        });
    }
    toJSON() {
        return {
            userLamports: this.userLamports.toString(),
            inputTaBalance: this.inputTaBalance.toString(),
            outputTaBalance: this.outputTaBalance.toString(),
        };
    }
    static fromJSON(obj) {
        return new UserSwapBalancesState({
            userLamports: new bn_js_1.default(obj.userLamports),
            inputTaBalance: new bn_js_1.default(obj.inputTaBalance),
            outputTaBalance: new bn_js_1.default(obj.outputTaBalance),
        });
    }
}
exports.UserSwapBalancesState = UserSwapBalancesState;
//# sourceMappingURL=UserSwapBalancesState.js.map
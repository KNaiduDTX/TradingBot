"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateGlobalConfig = updateGlobalConfig;
exports.updateGlobalConfigAdmin = updateGlobalConfigAdmin;
const web3_js_1 = require("@solana/web3.js");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
const Limo_1 = require("../Limo");
const types_1 = require("../rpc_client/types");
async function updateGlobalConfig(updateMode, value, mode) {
    const admin = process.env.ADMIN;
    const rpc = process.env.RPC_ENV;
    const globalConfig = process.env.LIMO_GLOBAL_CONFIG;
    const env = (0, utils_1.initializeClient)(rpc, admin, (0, utils_2.getLimoProgramId)(rpc), false);
    const client = new Limo_1.LimoClient(env.provider.connection, new web3_js_1.PublicKey(globalConfig));
    let valueCasted;
    switch (types_1.UpdateGlobalConfigMode.fromDecoded({ [updateMode]: "" }).discriminator) {
        case types_1.UpdateGlobalConfigMode.UpdateEmergencyMode.discriminator:
        case types_1.UpdateGlobalConfigMode.UpdateBlockNewOrders.discriminator:
        case types_1.UpdateGlobalConfigMode.UpdateBlockOrderTaking.discriminator:
        case types_1.UpdateGlobalConfigMode.UpdateFlashTakeOrderBlocked.discriminator:
        case types_1.UpdateGlobalConfigMode.UpdateHostFeeBps.discriminator:
        case types_1.UpdateGlobalConfigMode.UpdateOrderTakingPermissionless.discriminator:
        case types_1.UpdateGlobalConfigMode.UpdateOrderCloseDelaySeconds.discriminator:
        case types_1.UpdateGlobalConfigMode.UpdateTxnFeeCost.discriminator:
        case types_1.UpdateGlobalConfigMode.UpdateAtaCreationCost.discriminator:
            valueCasted = Number(value);
            break;
        case types_1.UpdateGlobalConfigMode.UpdateAdminAuthorityCached.discriminator:
            valueCasted = new web3_js_1.PublicKey(value);
            break;
        default:
            throw new Error("Invalid mode");
    }
    await client.getGlobalConfigState();
    await client.updateGlobalConfig(env.admin, updateMode, valueCasted, mode);
    console.log("Global Config updated");
}
async function updateGlobalConfigAdmin(globalConfigString, mode) {
    const admin = process.env.ADMIN;
    const rpc = process.env.RPC_ENV;
    const globalConfig = globalConfigString
        ? globalConfigString
        : process.env.LIMO_GLOBAL_CONFIG;
    const env = (0, utils_1.initializeClient)(rpc, admin, (0, utils_2.getLimoProgramId)(rpc), false);
    const client = new Limo_1.LimoClient(env.provider.connection, new web3_js_1.PublicKey(globalConfig));
    await client.updateGlobalConfigAdmin(env.admin, mode);
    console.log("Global Config Admin updated");
}
//# sourceMappingURL=updateCommands.js.map
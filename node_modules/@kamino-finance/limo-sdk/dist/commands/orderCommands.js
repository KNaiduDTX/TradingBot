"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listOrders = listOrders;
exports.getAllOrders = getAllOrders;
exports.placeOrder = placeOrder;
exports.permissionlessTakeOrder = permissionlessTakeOrder;
exports.listOrdersForUser = listOrdersForUser;
const web3_js_1 = require("@solana/web3.js");
const accounts_1 = require("../rpc_client/accounts");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
const Limo_1 = require("../Limo");
const decimal_js_1 = __importDefault(require("decimal.js"));
const bn_js_1 = __importDefault(require("bn.js"));
async function listOrders(quoteToken, baseToken, filterOutRemainingLamportsAmountBaseToken, filterOutRemainingLamportsAmountQuoteToken) {
    const admin = process.env.ADMIN;
    const rpc = process.env.RPC_ENV;
    const globalConfig = process.env.LIMO_GLOBAL_CONFIG;
    const filterOutBaseDecimalAmount = filterOutRemainingLamportsAmountBaseToken
        ? new decimal_js_1.default(filterOutRemainingLamportsAmountBaseToken)
        : new decimal_js_1.default(0);
    const filterOutQuoteDecimalAmount = filterOutRemainingLamportsAmountQuoteToken
        ? new decimal_js_1.default(filterOutRemainingLamportsAmountQuoteToken)
        : new decimal_js_1.default(0);
    let quote = new web3_js_1.PublicKey((quoteToken ?? process.env.QUOTE_TOKEN));
    let base = new web3_js_1.PublicKey((baseToken ?? process.env.BASE_TOKEN));
    const env = (0, utils_1.initializeClient)(rpc, admin, (0, utils_2.getLimoProgramId)(rpc), false);
    const client = new Limo_1.LimoClient(env.provider.connection, new web3_js_1.PublicKey(globalConfig));
    let bidOrders = await getOrders(client, base, quote);
    let askOrders = await getOrders(client, quote, base);
    let mints = new Set();
    for (let [order, _] of [...bidOrders, ...askOrders]) {
        mints.add(order.inputMint.toString());
        mints.add(order.outputMint.toString());
    }
    let decimalsMap = new Map();
    for (let mint of mints) {
        let decimals = await (0, utils_2.getMintDecimals)(env.provider.connection, new web3_js_1.PublicKey(mint));
        decimalsMap.set(mint, decimals);
    }
    let bidOrdersFormatted = [];
    let askOrdersFormatted = [];
    for (let [order, orderAddress] of askOrders) {
        // TODO: remove this, temporary until smart contracts fixed
        if (order.initialInputAmount.toNumber() === 0) {
            continue;
        }
        let quoteAmount = new decimal_js_1.default(order.initialInputAmount.toNumber());
        let baseAmount = new decimal_js_1.default(order.expectedOutputAmount.toNumber());
        let quoteToken = order.inputMint.toString();
        let baseToken = order.outputMint.toString();
        let quoteDecimals = decimalsMap.get(quoteToken);
        let baseDecimals = decimalsMap.get(baseToken);
        let quoteUiAmount = (0, utils_2.lamportsToAmountDecimal)(quoteAmount, quoteDecimals);
        let baseUiAmount = (0, utils_2.lamportsToAmountDecimal)(baseAmount, baseDecimals);
        if (baseUiAmount.lt(filterOutBaseDecimalAmount)) {
            continue;
        }
        if (quoteUiAmount.lt(filterOutQuoteDecimalAmount)) {
            continue;
        }
        let price = baseUiAmount.div(quoteUiAmount);
        let quoteDisplay = quoteToken.slice(0, 4);
        let baseDisplay = baseToken.slice(0, 4);
        askOrdersFormatted.push({
            price,
            quoteUiAmount,
            baseUiAmount,
            quoteDisplay,
            baseDisplay,
            orderAddress,
        });
    }
    for (let [order, orderAddress] of bidOrders) {
        // TODO: remove this, temporary until smart contracts fixed
        if (order.expectedOutputAmount.toNumber() === 0) {
            continue;
        }
        let quoteAmount = new decimal_js_1.default(order.expectedOutputAmount.toNumber());
        let baseAmount = new decimal_js_1.default(order.initialInputAmount.toNumber());
        let quoteToken = order.outputMint.toString();
        let baseToken = order.inputMint.toString();
        let quoteDecimals = decimalsMap.get(quoteToken);
        let baseDecimals = decimalsMap.get(baseToken);
        let quoteUiAmount = (0, utils_2.lamportsToAmountDecimal)(quoteAmount, quoteDecimals);
        let baseUiAmount = (0, utils_2.lamportsToAmountDecimal)(baseAmount, baseDecimals);
        if (baseUiAmount.lt(filterOutBaseDecimalAmount)) {
            continue;
        }
        if (quoteUiAmount.lt(filterOutQuoteDecimalAmount)) {
            continue;
        }
        let price = baseUiAmount.div(quoteUiAmount);
        let quoteDisplay = quoteToken.slice(0, 4);
        let baseDisplay = baseToken.slice(0, 4);
        bidOrdersFormatted.push({
            price,
            quoteUiAmount,
            baseUiAmount,
            quoteDisplay,
            baseDisplay,
            orderAddress,
        });
    }
    bidOrdersFormatted.sort((a, b) => {
        return b.price.comparedTo(a.price);
    });
    askOrdersFormatted.sort((a, b) => {
        return b.price.comparedTo(a.price);
    });
    for (let order of askOrdersFormatted) {
        console.log((0, utils_1.red)("ASK"), "Price", order.price.toFixed(5).padEnd(15, " "), "| Sell", order.quoteUiAmount.toFixed(5).padStart(15, " "), order.quoteDisplay, "| For", order.baseUiAmount.toFixed(5).padStart(20, " "), order.baseDisplay, "| OrderId", order.orderAddress.toString());
    }
    for (let order of bidOrdersFormatted) {
        console.log((0, utils_1.green)("BID"), "Price", order.price.toFixed(5).padEnd(15, " "), "| Buy ", order.quoteUiAmount.toFixed(5).padStart(15, " "), order.quoteDisplay, "| For", order.baseUiAmount.toFixed(5).padStart(20, " "), order.baseDisplay, "| OrderId", order.orderAddress.toString());
    }
}
async function getAllOrders() {
    const admin = process.env.ADMIN;
    const rpc = process.env.RPC_ENV;
    const globalConfig = process.env.LIMO_GLOBAL_CONFIG;
    const env = (0, utils_1.initializeClient)(rpc, admin, (0, utils_2.getLimoProgramId)(rpc), false);
    const client = new Limo_1.LimoClient(env.provider.connection, new web3_js_1.PublicKey(globalConfig));
    const ordersAndAddresses = await client.getAllOrdersStateAndAddressForGlobalConfig();
    for (const order of ordersAndAddresses) {
        console.log(order.address.toBase58());
    }
}
async function getOrders(client, inTokenMint, outTokenMint) {
    let filters = [];
    if (inTokenMint) {
        filters.push({
            memcmp: {
                bytes: inTokenMint.toBase58(),
                offset: 8 + 32 + 32,
            },
        });
    }
    if (outTokenMint) {
        filters.push({
            memcmp: {
                bytes: outTokenMint.toBase58(),
                offset: 8 + 32 + 32 + 32 + 32,
            },
        });
    }
    filters.push({
        dataSize: accounts_1.Order.layout.span + 8,
    });
    const state = (await client.getProgram().account.order.all(filters)).map((x) => {
        return [new accounts_1.Order(x.account), x.publicKey];
    });
    return state;
}
async function placeOrder(quoteToken, baseToken, uiAmount, price, type) {
    const admin = process.env.ADMIN;
    const rpc = process.env.RPC_ENV;
    const globalConfig = process.env.LIMO_GLOBAL_CONFIG;
    let base = new web3_js_1.PublicKey((baseToken ?? process.env.BASE_TOKEN));
    let quote = new web3_js_1.PublicKey((quoteToken ?? process.env.QUOTE_TOKEN));
    const env = (0, utils_1.initializeClient)(rpc, admin, (0, utils_2.getLimoProgramId)(rpc), false);
    const client = new Limo_1.LimoClient(env.provider.connection, new web3_js_1.PublicKey(globalConfig));
    const mintTokenPrograms = await client.getMintsProgramOwners([base, quote]);
    const baseTokenProgram = mintTokenPrograms[0];
    const quoteTokenProgram = mintTokenPrograms[1];
    let orderAddress;
    let signature;
    if (type === "bid") {
        const [sig, order] = await client.placeBid(env.admin, quote, base, new decimal_js_1.default(uiAmount), // baseUIAmount
        new decimal_js_1.default(price), "execute", baseTokenProgram, quoteTokenProgram);
        orderAddress = order.publicKey;
        signature = sig;
    }
    else {
        const [sig, order] = await client.placeAsk(env.admin, quote, base, new decimal_js_1.default(uiAmount), // quoteUIAmount
        new decimal_js_1.default(price), "execute", quoteTokenProgram, baseTokenProgram);
        orderAddress = order.publicKey;
        signature = sig;
    }
    let orderState = await accounts_1.Order.fetch(env.provider.connection, orderAddress, client.getProgramID());
    console.log("Place order", signature.toString());
}
async function permissionlessTakeOrder(order, amountToTakeDecimals, tipAmountLamports, mode) {
    const admin = process.env.ADMIN;
    const rpc = process.env.RPC_ENV;
    const globalConfig = process.env.LIMO_GLOBAL_CONFIG;
    const expressRelayProgramId = new web3_js_1.PublicKey(process.env.EXPRESS_RELAY_PROGRAM_ID);
    const env = (0, utils_1.initializeClient)(rpc, admin, (0, utils_2.getLimoProgramId)(rpc), false);
    const client = new Limo_1.LimoClient(env.provider.connection, new web3_js_1.PublicKey(globalConfig));
    const orderState = await accounts_1.Order.fetch(env.provider.connection, order, client.getProgramID());
    if (!orderState) {
        console.log("Order not found");
        return;
    }
    const mintDecimals = await client.getMintDecimals([
        orderState.inputMint,
        orderState.outputMint,
    ]);
    const inputAmountToTakeLamports = amountToTakeDecimals
        ? (0, utils_2.amountToLamportsBN)(new decimal_js_1.default(amountToTakeDecimals), mintDecimals.get(orderState.inputMint))
        : orderState.initialInputAmount;
    const expectedOutputAmountDecimal = orderState.expectedOutputAmount
        .mul(inputAmountToTakeLamports)
        .div(orderState.initialInputAmount);
    await client.permissionlessTakeOrder(env.admin, {
        state: orderState,
        address: order,
    }, inputAmountToTakeLamports, expectedOutputAmountDecimal, expressRelayProgramId, mode, tipAmountLamports ? new bn_js_1.default(tipAmountLamports) : new bn_js_1.default(0), mintDecimals);
}
async function listOrdersForUser(user) {
    const admin = process.env.ADMIN;
    const rpc = process.env.RPC_ENV;
    const globalConfig = process.env.LIMO_GLOBAL_CONFIG;
    const env = (0, utils_1.initializeClient)(rpc, admin, (0, utils_2.getLimoProgramId)(rpc), false);
    const client = new Limo_1.LimoClient(env.provider.connection, new web3_js_1.PublicKey(globalConfig));
    // Time and print the duration of the line below
    let orders = await client.getAllOrdersDisplayForMaker(user);
    console.log((0, utils_1.green)("Price".padStart(15, " ") +
        " |" +
        "Buy".padStart(7, " ").padEnd(62, " ") +
        " |" +
        "Sell".padStart(8, " ").padEnd(62, " ") +
        " |" +
        "Filled %".padStart(11, " ") +
        " |" +
        "OrderId".padStart(15, " ")));
    for (let order of orders) {
        console.log((0, utils_1.green)("->"), order.orderPriceInputToOutput.toFixed(5).padStart(12, " "), "|", order.expectedOutputAmountDecimal.toFixed(5).padStart(10, " "), order.state.outputMint.toString().padEnd(50, " "), "|", order.initialInputAmountDecimal.toFixed(5).padStart(10, " "), order.state.inputMint.toString().padEnd(50, " "), "|", order.orderFillPct.mul(100).toFixed(2).padStart(10, " "), "|", order.address.toString());
    }
}
//# sourceMappingURL=orderCommands.js.map
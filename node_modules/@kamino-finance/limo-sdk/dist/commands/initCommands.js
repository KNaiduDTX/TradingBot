"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.initGlobalConfigCommand = initGlobalConfigCommand;
exports.initVault = initVault;
exports.initVaultsFromMintsListFile = initVaultsFromMintsListFile;
exports.getAllMintsFromKaminoResources = getAllMintsFromKaminoResources;
exports.getKaminoTokenMintsFromApi = getKaminoTokenMintsFromApi;
const web3_js_1 = require("@solana/web3.js");
const accounts_1 = require("../rpc_client/accounts");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
const Limo_1 = require("../Limo");
const fs = __importStar(require("fs"));
async function initGlobalConfigCommand(globalConfigFilePath) {
    const admin = process.env.ADMIN;
    const rpc = process.env.RPC_ENV;
    console.log("rpc", rpc);
    const env = (0, utils_1.initializeClient)(rpc, admin, (0, utils_2.getLimoProgramId)(rpc), false);
    const globalConfig = globalConfigFilePath
        ? (0, utils_2.parseKeypairFile)(globalConfigFilePath)
        : web3_js_1.Keypair.generate();
    const client = new Limo_1.LimoClient(env.provider.connection, undefined);
    await client.createGlobalConfig(env.admin, globalConfig);
    let globalConfigState = await accounts_1.GlobalConfig.fetch(env.provider.connection, globalConfig.publicKey);
    console.log("Global Config", globalConfig.publicKey.toString(), globalConfigState?.toJSON());
}
async function initVault(mint, mode) {
    const admin = process.env.ADMIN;
    const rpc = process.env.RPC_ENV;
    const globalConfig = process.env.LIMO_GLOBAL_CONFIG;
    const env = (0, utils_1.initializeClient)(rpc, admin, (0, utils_2.getLimoProgramId)(rpc), false);
    const client = new Limo_1.LimoClient(env.provider.connection, new web3_js_1.PublicKey(globalConfig));
    let vault = (0, utils_2.getTokenVaultPDA)(client.getProgramID(), new web3_js_1.PublicKey(globalConfig), mint);
    await client.initializeVault(env.admin, mint, mode);
    mode !== "multisig" && console.log("Vault", vault.toString());
}
async function initVaultsFromMintsListFile(mintsListFilePath, mode) {
    const admin = process.env.ADMIN;
    const rpc = process.env.RPC_ENV;
    const globalConfig = process.env.LIMO_GLOBAL_CONFIG;
    const env = (0, utils_1.initializeClient)(rpc, admin, (0, utils_2.getLimoProgramId)(rpc), false);
    const client = new Limo_1.LimoClient(env.provider.connection, new web3_js_1.PublicKey(globalConfig));
    const fileContents = fs.readFileSync(mintsListFilePath, "utf8");
    // Parse the file contents into an array of mints
    let mints;
    try {
        mints = JSON.parse(fileContents);
        if (!Array.isArray(mints)) {
            throw new Error("File doesn't have an array");
        }
    }
    catch (error) {
        console.error("Error parsing mints list file:", error);
        process.exit(1);
    }
    console.log("Mints to initialize vaults for:", mints.length);
    const mintsSet = new utils_2.PublicKeySet(mints.map((mint) => new web3_js_1.PublicKey(mint)));
    for (let mint of mintsSet.toArray()) {
        const mintPk = new web3_js_1.PublicKey(mint);
        const vaultAddress = (0, utils_2.getTokenVaultPDA)(client.getProgramID(), new web3_js_1.PublicKey(globalConfig), mintPk);
        try {
            const vaultBalance = (await client.getConnection().getAccountInfo(vaultAddress))?.lamports;
            if (vaultBalance > 0) {
                mode !== "multisig" &&
                    console.log(`Vault ${vaultAddress.toString()} already has a balance of ${vaultBalance} so is initialized`);
                continue;
            }
        }
        catch (error) {
            // do nothing
        }
        await client.initializeVault(env.admin, mintPk, mode);
        mode !== "multisig" && console.log("Vault", vaultAddress.toString());
    }
}
async function getAllMintsFromKaminoResources() { }
const API_URL = "https://cdn.kamino.finance/resources.json";
async function getKaminoTokenMintsFromApi() {
    console.log("Fetching mints from API...");
    const supportedTokenMints = [];
    try {
        const response = await fetch(API_URL);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        const tokensDict = data["mainnet-beta"].tokens;
        for (const token of Object.values(tokensDict)) {
            supportedTokenMints.push(new web3_js_1.PublicKey(token.mint));
        }
    }
    catch (error) {
        console.log("Failed to fetch token mints:", error);
    }
    fs.writeFileSync("./kaminoTokenMints.json", JSON.stringify(supportedTokenMints));
    console.log("Written to: ", "./kaminoTokenMints.json");
}
//# sourceMappingURL=initCommands.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAddExtraComputeUnitFeeTransaction = createAddExtraComputeUnitFeeTransaction;
exports.initializeClient = initializeClient;
exports.unwrap = unwrap;
exports.red = red;
exports.green = green;
exports.magenta = magenta;
exports.yellow = yellow;
exports.blue = blue;
exports.cyan = cyan;
exports.lightRed = lightRed;
exports.lightGreen = lightGreen;
exports.lightBlue = lightBlue;
exports.lightMagenta = lightMagenta;
exports.lightCyan = lightCyan;
exports.lightYellow = lightYellow;
exports.lightWhite = lightWhite;
exports.darkGray = darkGray;
exports.lightGray = lightGray;
const web3_js_1 = require("@solana/web3.js");
const utils_1 = require("../utils");
function createAddExtraComputeUnitFeeTransaction(units, microLamports) {
    const ixns = [];
    ixns.push(web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({ units }));
    ixns.push(web3_js_1.ComputeBudgetProgram.setComputeUnitPrice({ microLamports }));
    return ixns;
}
function initializeClient(cluster, admin, programId, multisig, debug = false) {
    let resolvedCluster;
    let resolvedAdmin;
    if (cluster) {
        resolvedCluster = cluster;
    }
    else {
        throw "Must specify cluster";
    }
    if (admin) {
        resolvedAdmin = admin;
    }
    else {
        console.log("Running without an admin keypair!");
        resolvedAdmin = "";
    }
    // Get connection first
    const env = (0, utils_1.setUpProgram)({
        adminFilePath: resolvedAdmin,
        clusterOverride: cluster,
        programOverride: programId,
    });
    !multisig && debug && console.log("\nSettings ⚙️");
    !multisig &&
        debug &&
        console.log("Program ID:", env.program.programId.toString());
    !multisig && debug && console.log("Admin:", resolvedAdmin);
    !multisig && debug && console.log("Cluster:", resolvedCluster);
    return env;
}
function unwrap(val) {
    if (val) {
        return val;
    }
    else {
        throw new Error("Value is null");
    }
}
function colouredString(code, msg) {
    if (process.env.NODE_ENV !== "production") {
        return `\x1b${code}${msg}\x1b[0m`;
    }
    return msg;
}
function red(msg) {
    return colouredString("[31m", msg);
}
function green(msg) {
    return colouredString("[32m", msg);
}
function magenta(msg) {
    return colouredString("[35m", msg);
}
function yellow(msg) {
    return colouredString("[33m", msg);
}
function blue(msg) {
    return colouredString("[34m", msg);
}
function cyan(msg) {
    return colouredString("[36m", msg);
}
function lightRed(msg) {
    return colouredString("[91m", msg);
}
function lightGreen(msg) {
    return colouredString("[92m", msg);
}
function lightBlue(msg) {
    return colouredString("[94m", msg);
}
function lightMagenta(msg) {
    return colouredString("[95m", msg);
}
function lightCyan(msg) {
    return colouredString("[96m", msg);
}
function lightYellow(msg) {
    return colouredString("[93m", msg);
}
function lightWhite(msg) {
    return colouredString("[97m", msg);
}
function darkGray(msg) {
    return colouredString("[90m", msg);
}
function lightGray(msg) {
    return colouredString("[37m", msg);
}
//# sourceMappingURL=utils.js.map
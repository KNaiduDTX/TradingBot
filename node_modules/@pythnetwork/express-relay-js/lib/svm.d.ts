import { Connection, PublicKey, Transaction, TransactionInstruction } from "@solana/web3.js";
import * as anchor from "@coral-xyz/anchor";
import { BidSvmOnChain, BidSvmSwap, ExpressRelaySvmConfig, OpportunitySvmSwap } from "./types";
export declare const FEE_SPLIT_PRECISION: any;
export declare const FEE_SPLIT_PRECISION_PPM: any;
export declare function getConfigRouterPda(chain: string, router: PublicKey): PublicKey;
export declare function getExpressRelayMetadataPda(chain: string): PublicKey;
export declare function constructSubmitBidInstruction(searcher: PublicKey, router: PublicKey, permissionKey: PublicKey, bidAmount: anchor.BN, deadline: anchor.BN, chainId: string, relayerSigner: PublicKey, feeReceiverRelayer: PublicKey): Promise<TransactionInstruction>;
export declare function getAssociatedTokenAddress(owner: PublicKey, tokenMintAddress: PublicKey, tokenProgram: PublicKey): PublicKey;
export declare function createAtaIdempotentInstruction(owner: PublicKey, mint: PublicKey, payer: PublicKey | undefined, tokenProgram: PublicKey): [PublicKey, TransactionInstruction];
export declare function constructSwapInstruction(searcher: PublicKey, swapOpportunity: OpportunitySvmSwap, bidAmount: anchor.BN, deadline: anchor.BN, chainId: string, feeReceiverRelayer: PublicKey, relayerSigner: PublicKey): Promise<TransactionInstruction>;
export declare function getWrapSolInstructions(payer: PublicKey, owner: PublicKey, amount: anchor.BN, createAta?: boolean): TransactionInstruction[];
export declare function getUnwrapSolInstruction(owner: PublicKey): TransactionInstruction;
export declare function constructSwapBid(tx: Transaction, searcher: PublicKey, swapOpportunity: OpportunitySvmSwap, bidAmount: anchor.BN, deadline: anchor.BN, chainId: string, feeReceiverRelayer: PublicKey, relayerSigner: PublicKey): Promise<BidSvmSwap>;
export declare function constructSvmBid(tx: Transaction, searcher: PublicKey, router: PublicKey, permissionKey: PublicKey, bidAmount: anchor.BN, deadline: anchor.BN, chainId: string, relayerSigner: PublicKey, feeReceiverRelayer: PublicKey): Promise<BidSvmOnChain>;
export declare function getExpressRelaySvmConfig(chainId: string, connection: Connection): Promise<ExpressRelaySvmConfig>;
//# sourceMappingURL=svm.d.ts.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const anchor = __importStar(require("@coral-xyz/anchor"));
const web3_js_1 = require("@solana/web3.js");
const simpleSearcherSvm_1 = require("./simpleSearcherSvm");
class SearcherPinger extends simpleSearcherSvm_1.SimpleSearcherSvm {
    apiKey;
    constructor(endpointExpressRelay, chainId, searcher, endpointSvm, bid, apiKey) {
        super(endpointExpressRelay, chainId, searcher, endpointSvm, bid, apiKey);
        this.apiKey = apiKey;
    }
    async opportunityHandler() {
        // don't do anything with the opportunity
    }
    async ping() {
        if (!this.latestChainUpdate[this.chainId]) {
            console.log(`No recent blockhash for chain ${this.chainId}, skipping ping`);
            return;
        }
        const feeInstruction = web3_js_1.ComputeBudgetProgram.setComputeUnitPrice({
            microLamports: this.latestChainUpdate[this.chainId].latestPrioritizationFee,
        });
        const config = await this.getExpressRelayConfig();
        const txRaw = new anchor.web3.Transaction().add(feeInstruction);
        const bid = await this.client.constructSvmBid(txRaw, this.searcher.publicKey, this.searcher.publicKey, this.searcher.publicKey, this.bid, new anchor.BN(Math.round(Date.now() / 1000 + 60)), this.chainId, config.relayerSigner, config.feeReceiverRelayer);
        bid.transaction.recentBlockhash =
            this.latestChainUpdate[this.chainId].blockhash;
        bid.transaction.sign(this.searcher);
        try {
            const bidId = await this.client.submitBid(bid);
            console.log(`Successful bid. Bid id ${bidId}`);
        }
        catch (error) {
            console.error(`Failed to ping: ${error}`);
        }
    }
    async start() {
        // run ping every 10 seconds
        setInterval(async () => {
            await this.ping();
        }, 10000);
        await super.start();
    }
}
async function run() {
    const argv = (0, simpleSearcherSvm_1.makeParser)().parseSync();
    const searcherKeyPair = (0, simpleSearcherSvm_1.getKeypair)(argv.privateKey, argv.privateKeyJsonFile);
    const simpleSearcher = new SearcherPinger(argv.endpointExpressRelay, argv.chainId, searcherKeyPair, argv.endpointSvm, argv.bid, argv.apiKey);
    await simpleSearcher.start();
}
if (require.main === module) {
    run();
}

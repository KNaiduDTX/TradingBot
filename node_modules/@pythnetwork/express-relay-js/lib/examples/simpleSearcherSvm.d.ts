import yargs from "yargs";
import { Client, ExpressRelaySvmConfig, Opportunity, OpportunitySvm, OpportunitySvmLimo, OpportunitySvmSwap } from "../index";
import { BidStatusUpdate, BidSvm, ChainId, OpportunityDelete, SvmChainUpdate } from "../types";
import * as anchor from "@coral-xyz/anchor";
import { Keypair, PublicKey, Connection, TransactionInstruction } from "@solana/web3.js";
import * as limo from "@kamino-finance/limo-sdk";
import { OrderStateAndAddress } from "@kamino-finance/limo-sdk/dist/utils";
export declare class SimpleSearcherSvm {
    endpointExpressRelay: string;
    chainId: string;
    protected searcher: Keypair;
    endpointSvm: string;
    apiKey?: string | undefined;
    protected client: Client;
    protected readonly connectionSvm: Connection;
    protected mintDecimals: Record<string, number>;
    protected expressRelayConfig: ExpressRelaySvmConfig | undefined;
    protected latestChainUpdate: Record<ChainId, SvmChainUpdate>;
    protected readonly bid: anchor.BN;
    protected bidChainId: Record<string, string>;
    constructor(endpointExpressRelay: string, chainId: string, searcher: Keypair, endpointSvm: string, bid: number, apiKey?: string | undefined);
    websocketCloseHandler(): Promise<void>;
    bidStatusHandler(bidStatus: BidStatusUpdate): Promise<void>;
    getMintDecimalsCached(mint: PublicKey): Promise<number>;
    generateComputeBudgetInstructions(): TransactionInstruction[];
    /**
     * Generates a bid for a given limo opportunity.
     * The transaction in this bid transfers assets from the searcher's wallet to fulfill the limit order.
     * @param opportunity The SVM opportunity to bid on.
     * @returns The generated bid object.
     */
    generateBidLimo(opportunity: OpportunitySvmLimo): Promise<BidSvm>;
    /**
     * Generates a bid for a given swap opportunity.
     * The transaction in this bid transfers assets from the searcher's wallet to the specified wallets to fulfill the opportunity.
     * @param opportunity The SVM opportunity to bid on.
     * @returns The generated bid object.
     */
    generateBidSwap(opportunity: OpportunitySvmSwap): Promise<BidSvm>;
    /**
     * Generates a bid for a given opportunity.
     * The transaction in this bid transfers assets from the searcher's wallet to fulfill the opportunity.
     * @param opportunity The SVM opportunity to bid on.
     * @returns The generated bid object.
     */
    generateBid(opportunity: OpportunitySvm): Promise<BidSvm>;
    getExpressRelayConfig(): Promise<ExpressRelaySvmConfig>;
    /**
     * Calculates the bid amount for a given order.
     * @param opportunity The opportunity to be fulfilled
     * @returns The bid amount in the necessary token
     */
    getBidAmount(opportunity: OpportunitySvm): Promise<anchor.BN>;
    /**
     * Creates the take order instructions on the Limo program
     * @param limoClient The Limo client
     * @param order The limit order to be fulfilled
     * @returns The Limo TakeOrder instructions used to fulfill the order
     */
    generateTakeOrderIxs(limoClient: limo.LimoClient, order: OrderStateAndAddress): Promise<TransactionInstruction[]>;
    protected getInputAmount(order: OrderStateAndAddress): anchor.BN;
    opportunityHandler(opportunity: Opportunity): Promise<void>;
    svmChainUpdateHandler(update: SvmChainUpdate): Promise<void>;
    removeOpportunitiesHandler(opportunityDelete: OpportunityDelete): Promise<void>;
    start(): Promise<void>;
}
export declare function makeParser(): yargs.Argv<{
    "endpoint-express-relay": string;
} & {
    "chain-id": string;
} & {
    bid: number;
} & {
    "private-key": string | undefined;
} & {
    "private-key-json-file": string | undefined;
} & {
    "api-key": string | undefined;
} & {
    "endpoint-svm": string;
}>;
export declare function getKeypair(privateKey: string | undefined, privateKeyJsonFile: string | undefined): Keypair;
//# sourceMappingURL=simpleSearcherSvm.d.ts.map
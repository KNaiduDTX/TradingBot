"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return QuickLRU;
    }
});
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _classApplyDescriptorUpdate(receiver, descriptor) {
    if (descriptor.set) {
        if (!("__destrWrapper" in descriptor)) {
            descriptor.__destrWrapper = {
                set value (v){
                    descriptor.set.call(receiver, v);
                },
                get value () {
                    return descriptor.get.call(receiver);
                }
            };
        }
        return descriptor.__destrWrapper;
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        return descriptor;
    }
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
    return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldInit(obj, privateMap, value) {
    _checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
    _classApplyDescriptorSet(receiver, descriptor, value);
    return value;
}
function _classPrivateFieldUpdate(receiver, privateMap) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "update");
    return _classApplyDescriptorUpdate(receiver, descriptor);
}
function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
}
function _classPrivateMethodInit(obj, privateSet) {
    _checkPrivateRedeclaration(obj, privateSet);
    privateSet.add(obj);
}
function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
        _construct = Reflect.construct;
    } else {
        _construct = function _construct(Parent, args, Class) {
            var a = [
                null
            ];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _setPrototypeOf(instance, Class.prototype);
            return instance;
        };
    }
    return _construct.apply(null, arguments);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
var __generator = (void 0) && (void 0).__generator || function(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v1) {
            return step([
                n,
                v1
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var _size = /*#__PURE__*/ new WeakMap(), _cache = /*#__PURE__*/ new WeakMap(), _oldCache = /*#__PURE__*/ new WeakMap(), _maxSize = /*#__PURE__*/ new WeakMap(), _maxAge = /*#__PURE__*/ new WeakMap(), _onEviction = /*#__PURE__*/ new WeakMap(), _emitEvictions = /*#__PURE__*/ new WeakSet(), _deleteIfExpired = /*#__PURE__*/ new WeakSet(), _getOrDeleteIfExpired = /*#__PURE__*/ new WeakSet(), _getItemValue = /*#__PURE__*/ new WeakSet(), _peek = /*#__PURE__*/ new WeakSet(), _set = /*#__PURE__*/ new WeakSet(), _moveToRecent = /*#__PURE__*/ new WeakSet(), _entriesAscending = /*#__PURE__*/ new WeakSet();
var _iterator = Symbol.iterator, _toStringTag = Symbol.toStringTag;
var QuickLRU = /*#__PURE__*/ function(Map1) {
    "use strict";
    _inherits(QuickLRU, Map1);
    var _super = _createSuper(QuickLRU);
    function QuickLRU() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        _classCallCheck(this, QuickLRU);
        var _this;
        _this = _super.call(this);
        _classPrivateMethodInit(_assertThisInitialized(_this), _emitEvictions);
        _classPrivateMethodInit(_assertThisInitialized(_this), _deleteIfExpired);
        _classPrivateMethodInit(_assertThisInitialized(_this), _getOrDeleteIfExpired);
        _classPrivateMethodInit(_assertThisInitialized(_this), _getItemValue);
        _classPrivateMethodInit(_assertThisInitialized(_this), _peek);
        _classPrivateMethodInit(_assertThisInitialized(_this), _set);
        _classPrivateMethodInit(_assertThisInitialized(_this), _moveToRecent);
        _classPrivateMethodInit(_assertThisInitialized(_this), _entriesAscending);
        _classPrivateFieldInit(_assertThisInitialized(_this), _size, {
            writable: true,
            value: 0
        });
        _classPrivateFieldInit(_assertThisInitialized(_this), _cache, {
            writable: true,
            value: new Map()
        });
        _classPrivateFieldInit(_assertThisInitialized(_this), _oldCache, {
            writable: true,
            value: new Map()
        });
        _classPrivateFieldInit(_assertThisInitialized(_this), _maxSize, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldInit(_assertThisInitialized(_this), _maxAge, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldInit(_assertThisInitialized(_this), _onEviction, {
            writable: true,
            value: void 0
        });
        if (!(options.maxSize && options.maxSize > 0)) {
            throw new TypeError("`maxSize` must be a number greater than 0");
        }
        if (typeof options.maxAge === "number" && options.maxAge === 0) {
            throw new TypeError("`maxAge` must be a number greater than 0");
        }
        _classPrivateFieldSet(_assertThisInitialized(_this), _maxSize, options.maxSize);
        _classPrivateFieldSet(_assertThisInitialized(_this), _maxAge, options.maxAge || Number.POSITIVE_INFINITY);
        _classPrivateFieldSet(_assertThisInitialized(_this), _onEviction, options.onEviction);
        return _this;
    }
    _createClass(QuickLRU, [
        {
            key: "__oldCache",
            get: // For tests.
            function get() {
                return _classPrivateFieldGet(this, _oldCache);
            }
        },
        {
            key: "get",
            value: function get(key) {
                if (_classPrivateFieldGet(this, _cache).has(key)) {
                    var item = _classPrivateFieldGet(this, _cache).get(key);
                    return _classPrivateMethodGet(this, _getItemValue, getItemValue).call(this, key, item);
                }
                if (_classPrivateFieldGet(this, _oldCache).has(key)) {
                    var item1 = _classPrivateFieldGet(this, _oldCache).get(key);
                    if (_classPrivateMethodGet(this, _deleteIfExpired, deleteIfExpired).call(this, key, item1) === false) {
                        _classPrivateMethodGet(this, _moveToRecent, moveToRecent).call(this, key, item1);
                        return item1.value;
                    }
                }
            }
        },
        {
            key: "set",
            value: function set1(key, value) {
                var ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _maxAge1 = ref.maxAge, maxAge = _maxAge1 === void 0 ? _classPrivateFieldGet(this, _maxAge) : _maxAge1;
                var expiry = typeof maxAge === "number" && maxAge !== Number.POSITIVE_INFINITY ? Date.now() + maxAge : undefined;
                if (_classPrivateFieldGet(this, _cache).has(key)) {
                    _classPrivateFieldGet(this, _cache).set(key, {
                        value: value,
                        expiry: expiry
                    });
                } else {
                    _classPrivateMethodGet(this, _set, set).call(this, key, {
                        value: value,
                        expiry: expiry
                    });
                }
                return this;
            }
        },
        {
            key: "has",
            value: function has(key) {
                if (_classPrivateFieldGet(this, _cache).has(key)) {
                    return !_classPrivateMethodGet(this, _deleteIfExpired, deleteIfExpired).call(this, key, _classPrivateFieldGet(this, _cache).get(key));
                }
                if (_classPrivateFieldGet(this, _oldCache).has(key)) {
                    return !_classPrivateMethodGet(this, _deleteIfExpired, deleteIfExpired).call(this, key, _classPrivateFieldGet(this, _oldCache).get(key));
                }
                return false;
            }
        },
        {
            key: "peek",
            value: function peek1(key) {
                if (_classPrivateFieldGet(this, _cache).has(key)) {
                    return _classPrivateMethodGet(this, _peek, peek).call(this, key, _classPrivateFieldGet(this, _cache));
                }
                if (_classPrivateFieldGet(this, _oldCache).has(key)) {
                    return _classPrivateMethodGet(this, _peek, peek).call(this, key, _classPrivateFieldGet(this, _oldCache));
                }
            }
        },
        {
            key: "delete",
            value: function _delete(key) {
                var deleted = _classPrivateFieldGet(this, _cache).delete(key);
                if (deleted) {
                    _classPrivateFieldUpdate(this, _size).value--;
                }
                return _classPrivateFieldGet(this, _oldCache).delete(key) || deleted;
            }
        },
        {
            key: "clear",
            value: function clear() {
                _classPrivateFieldGet(this, _cache).clear();
                _classPrivateFieldGet(this, _oldCache).clear();
                _classPrivateFieldSet(this, _size, 0);
            }
        },
        {
            key: "resize",
            value: function resize(newSize) {
                if (!(newSize && newSize > 0)) {
                    throw new TypeError("`maxSize` must be a number greater than 0");
                }
                var items = _toConsumableArray(_classPrivateMethodGet(this, _entriesAscending, entriesAscending).call(this));
                var removeCount = items.length - newSize;
                if (removeCount < 0) {
                    _classPrivateFieldSet(this, _cache, new Map(items));
                    _classPrivateFieldSet(this, _oldCache, new Map());
                    _classPrivateFieldSet(this, _size, items.length);
                } else {
                    if (removeCount > 0) {
                        _classPrivateMethodGet(this, _emitEvictions, emitEvictions).call(this, items.slice(0, removeCount));
                    }
                    _classPrivateFieldSet(this, _oldCache, new Map(items.slice(removeCount)));
                    _classPrivateFieldSet(this, _cache, new Map());
                    _classPrivateFieldSet(this, _size, 0);
                }
                _classPrivateFieldSet(this, _maxSize, newSize);
            }
        },
        {
            key: "keys",
            value: function keys() {
                var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, key, err;
                return __generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            _state.label = 1;
                        case 1:
                            _state.trys.push([
                                1,
                                6,
                                7,
                                8
                            ]);
                            _iterator = this[Symbol.iterator]();
                            _state.label = 2;
                        case 2:
                            if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                3,
                                5
                            ];
                            _value = _slicedToArray(_step.value, 1), key = _value[0];
                            return [
                                4,
                                key
                            ];
                        case 3:
                            _state.sent();
                            _state.label = 4;
                        case 4:
                            _iteratorNormalCompletion = true;
                            return [
                                3,
                                2
                            ];
                        case 5:
                            return [
                                3,
                                8
                            ];
                        case 6:
                            err = _state.sent();
                            _didIteratorError = true;
                            _iteratorError = err;
                            return [
                                3,
                                8
                            ];
                        case 7:
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                            return [
                                7
                            ];
                        case 8:
                            return [
                                2
                            ];
                    }
                });
            }
        },
        {
            key: "values",
            value: function values() {
                var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, value, err;
                return __generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            _state.label = 1;
                        case 1:
                            _state.trys.push([
                                1,
                                6,
                                7,
                                8
                            ]);
                            _iterator = this[Symbol.iterator]();
                            _state.label = 2;
                        case 2:
                            if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                3,
                                5
                            ];
                            _value = _slicedToArray(_step.value, 2), value = _value[1];
                            return [
                                4,
                                value
                            ];
                        case 3:
                            _state.sent();
                            _state.label = 4;
                        case 4:
                            _iteratorNormalCompletion = true;
                            return [
                                3,
                                2
                            ];
                        case 5:
                            return [
                                3,
                                8
                            ];
                        case 6:
                            err = _state.sent();
                            _didIteratorError = true;
                            _iteratorError = err;
                            return [
                                3,
                                8
                            ];
                        case 7:
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                            return [
                                7
                            ];
                        case 8:
                            return [
                                2
                            ];
                    }
                });
            }
        },
        {
            key: _iterator,
            value: function value() {
                var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item, _item, key, value1, deleted, err, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, item1, _item1, key1, value2, deleted1, err;
                return __generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            _state.label = 1;
                        case 1:
                            _state.trys.push([
                                1,
                                6,
                                7,
                                8
                            ]);
                            _iterator = _classPrivateFieldGet(this, _cache)[Symbol.iterator]();
                            _state.label = 2;
                        case 2:
                            if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                3,
                                5
                            ];
                            item = _step.value;
                            _item = _slicedToArray(item, 2), key = _item[0], value1 = _item[1];
                            deleted = _classPrivateMethodGet(this, _deleteIfExpired, deleteIfExpired).call(this, key, value1);
                            if (!(deleted === false)) return [
                                3,
                                4
                            ];
                            return [
                                4,
                                [
                                    key,
                                    value1.value
                                ]
                            ];
                        case 3:
                            _state.sent();
                            _state.label = 4;
                        case 4:
                            _iteratorNormalCompletion = true;
                            return [
                                3,
                                2
                            ];
                        case 5:
                            return [
                                3,
                                8
                            ];
                        case 6:
                            err = _state.sent();
                            _didIteratorError = true;
                            _iteratorError = err;
                            return [
                                3,
                                8
                            ];
                        case 7:
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                            return [
                                7
                            ];
                        case 8:
                            _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                            _state.label = 9;
                        case 9:
                            _state.trys.push([
                                9,
                                14,
                                15,
                                16
                            ]);
                            _iterator1 = _classPrivateFieldGet(this, _oldCache)[Symbol.iterator]();
                            _state.label = 10;
                        case 10:
                            if (!!(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done)) return [
                                3,
                                13
                            ];
                            item1 = _step1.value;
                            _item1 = _slicedToArray(item1, 2), key1 = _item1[0], value2 = _item1[1];
                            if (!!_classPrivateFieldGet(this, _cache).has(key1)) return [
                                3,
                                12
                            ];
                            deleted1 = _classPrivateMethodGet(this, _deleteIfExpired, deleteIfExpired).call(this, key1, value2);
                            if (!(deleted1 === false)) return [
                                3,
                                12
                            ];
                            return [
                                4,
                                [
                                    key1,
                                    value2.value
                                ]
                            ];
                        case 11:
                            _state.sent();
                            _state.label = 12;
                        case 12:
                            _iteratorNormalCompletion1 = true;
                            return [
                                3,
                                10
                            ];
                        case 13:
                            return [
                                3,
                                16
                            ];
                        case 14:
                            err = _state.sent();
                            _didIteratorError1 = true;
                            _iteratorError1 = err;
                            return [
                                3,
                                16
                            ];
                        case 15:
                            try {
                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                    _iterator1.return();
                                }
                            } finally{
                                if (_didIteratorError1) {
                                    throw _iteratorError1;
                                }
                            }
                            return [
                                7
                            ];
                        case 16:
                            return [
                                2
                            ];
                    }
                });
            }
        },
        {
            key: "entriesDescending",
            value: function entriesDescending() {
                var items, i, item, _item, key, value, deleted, i1, item1, _item1, key1, value1, deleted1;
                return __generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            items = _toConsumableArray(_classPrivateFieldGet(this, _cache));
                            i = items.length - 1;
                            _state.label = 1;
                        case 1:
                            if (!(i >= 0)) return [
                                3,
                                4
                            ];
                            item = items[i];
                            _item = _slicedToArray(item, 2), key = _item[0], value = _item[1];
                            deleted = _classPrivateMethodGet(this, _deleteIfExpired, deleteIfExpired).call(this, key, value);
                            if (!(deleted === false)) return [
                                3,
                                3
                            ];
                            return [
                                4,
                                [
                                    key,
                                    value.value
                                ]
                            ];
                        case 2:
                            _state.sent();
                            _state.label = 3;
                        case 3:
                            --i;
                            return [
                                3,
                                1
                            ];
                        case 4:
                            items = _toConsumableArray(_classPrivateFieldGet(this, _oldCache));
                            i1 = items.length - 1;
                            _state.label = 5;
                        case 5:
                            if (!(i1 >= 0)) return [
                                3,
                                8
                            ];
                            item1 = items[i1];
                            _item1 = _slicedToArray(item1, 2), key1 = _item1[0], value1 = _item1[1];
                            if (!!_classPrivateFieldGet(this, _cache).has(key1)) return [
                                3,
                                7
                            ];
                            deleted1 = _classPrivateMethodGet(this, _deleteIfExpired, deleteIfExpired).call(this, key1, value1);
                            if (!(deleted1 === false)) return [
                                3,
                                7
                            ];
                            return [
                                4,
                                [
                                    key1,
                                    value1.value
                                ]
                            ];
                        case 6:
                            _state.sent();
                            _state.label = 7;
                        case 7:
                            --i1;
                            return [
                                3,
                                5
                            ];
                        case 8:
                            return [
                                2
                            ];
                    }
                });
            }
        },
        {
            key: "entriesAscending",
            value: function entriesAscending1() {
                var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, key, value, err;
                return __generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                            _state.label = 1;
                        case 1:
                            _state.trys.push([
                                1,
                                6,
                                7,
                                8
                            ]);
                            _iterator = _classPrivateMethodGet(this, _entriesAscending, entriesAscending).call(this)[Symbol.iterator]();
                            _state.label = 2;
                        case 2:
                            if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                3,
                                5
                            ];
                            _value = _slicedToArray(_step.value, 2), key = _value[0], value = _value[1];
                            return [
                                4,
                                [
                                    key,
                                    value.value
                                ]
                            ];
                        case 3:
                            _state.sent();
                            _state.label = 4;
                        case 4:
                            _iteratorNormalCompletion = true;
                            return [
                                3,
                                2
                            ];
                        case 5:
                            return [
                                3,
                                8
                            ];
                        case 6:
                            err = _state.sent();
                            _didIteratorError = true;
                            _iteratorError = err;
                            return [
                                3,
                                8
                            ];
                        case 7:
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                    _iterator.return();
                                }
                            } finally{
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                            return [
                                7
                            ];
                        case 8:
                            return [
                                2
                            ];
                    }
                });
            }
        },
        {
            key: "size",
            get: function get() {
                if (!_classPrivateFieldGet(this, _size)) {
                    return _classPrivateFieldGet(this, _oldCache).size;
                }
                var oldCacheSize = 0;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = _classPrivateFieldGet(this, _oldCache).keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var key = _step.value;
                        if (!_classPrivateFieldGet(this, _cache).has(key)) {
                            oldCacheSize++;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return Math.min(_classPrivateFieldGet(this, _size) + oldCacheSize, _classPrivateFieldGet(this, _maxSize));
            }
        },
        {
            key: "maxSize",
            get: function get() {
                return _classPrivateFieldGet(this, _maxSize);
            }
        },
        {
            key: "entries",
            value: function entries() {
                return this.entriesAscending();
            }
        },
        {
            key: "forEach",
            value: function forEach(callbackFunction) {
                var thisArgument = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this.entriesAscending()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _value = _slicedToArray(_step.value, 2), key = _value[0], value = _value[1];
                        callbackFunction.call(thisArgument, value, key, this);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },
        {
            key: _toStringTag,
            get: function get() {
                return JSON.stringify(_toConsumableArray(this.entriesAscending()));
            }
        }
    ]);
    return QuickLRU;
}(_wrapNativeSuper(Map));
function emitEvictions(cache) {
    if (typeof _classPrivateFieldGet(this, _onEviction) !== "function") {
        return;
    }
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = cache[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _value = _slicedToArray(_step.value, 2), key = _value[0], item = _value[1];
            _classPrivateFieldGet(this, _onEviction).call(this, key, item.value);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}
function deleteIfExpired(key, item) {
    if (typeof item.expiry === "number" && item.expiry <= Date.now()) {
        if (typeof _classPrivateFieldGet(this, _onEviction) === "function") {
            _classPrivateFieldGet(this, _onEviction).call(this, key, item.value);
        }
        return this.delete(key);
    }
    return false;
}
function getOrDeleteIfExpired(key, item) {
    var deleted = _classPrivateMethodGet(this, _deleteIfExpired, deleteIfExpired).call(this, key, item);
    if (deleted === false) {
        return item.value;
    }
}
function getItemValue(key, item) {
    return item.expiry ? _classPrivateMethodGet(this, _getOrDeleteIfExpired, getOrDeleteIfExpired).call(this, key, item) : item.value;
}
function peek(key, cache) {
    var item = cache.get(key);
    return _classPrivateMethodGet(this, _getItemValue, getItemValue).call(this, key, item);
}
function set(key, value) {
    _classPrivateFieldGet(this, _cache).set(key, value);
    _classPrivateFieldUpdate(this, _size).value++;
    if (_classPrivateFieldGet(this, _size) >= _classPrivateFieldGet(this, _maxSize)) {
        _classPrivateFieldSet(this, _size, 0);
        _classPrivateMethodGet(this, _emitEvictions, emitEvictions).call(this, _classPrivateFieldGet(this, _oldCache));
        _classPrivateFieldSet(this, _oldCache, _classPrivateFieldGet(this, _cache));
        _classPrivateFieldSet(this, _cache, new Map());
    }
}
function moveToRecent(key, item) {
    _classPrivateFieldGet(this, _oldCache).delete(key);
    _classPrivateMethodGet(this, _set, set).call(this, key, item);
}
function entriesAscending() {
    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item, _item, key, value, deleted, err, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, item1, _item1, key1, value1, deleted1, err;
    return __generator(this, function(_state) {
        switch(_state.label){
            case 0:
                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                _state.label = 1;
            case 1:
                _state.trys.push([
                    1,
                    6,
                    7,
                    8
                ]);
                _iterator = _classPrivateFieldGet(this, _oldCache)[Symbol.iterator]();
                _state.label = 2;
            case 2:
                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                    3,
                    5
                ];
                item = _step.value;
                _item = _slicedToArray(item, 2), key = _item[0], value = _item[1];
                if (!!_classPrivateFieldGet(this, _cache).has(key)) return [
                    3,
                    4
                ];
                deleted = _classPrivateMethodGet(this, _deleteIfExpired, deleteIfExpired).call(this, key, value);
                if (!(deleted === false)) return [
                    3,
                    4
                ];
                return [
                    4,
                    item
                ];
            case 3:
                _state.sent();
                _state.label = 4;
            case 4:
                _iteratorNormalCompletion = true;
                return [
                    3,
                    2
                ];
            case 5:
                return [
                    3,
                    8
                ];
            case 6:
                err = _state.sent();
                _didIteratorError = true;
                _iteratorError = err;
                return [
                    3,
                    8
                ];
            case 7:
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
                return [
                    7
                ];
            case 8:
                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                _state.label = 9;
            case 9:
                _state.trys.push([
                    9,
                    14,
                    15,
                    16
                ]);
                _iterator1 = _classPrivateFieldGet(this, _cache)[Symbol.iterator]();
                _state.label = 10;
            case 10:
                if (!!(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done)) return [
                    3,
                    13
                ];
                item1 = _step1.value;
                _item1 = _slicedToArray(item1, 2), key1 = _item1[0], value1 = _item1[1];
                deleted1 = _classPrivateMethodGet(this, _deleteIfExpired, deleteIfExpired).call(this, key1, value1);
                if (!(deleted1 === false)) return [
                    3,
                    12
                ];
                return [
                    4,
                    item1
                ];
            case 11:
                _state.sent();
                _state.label = 12;
            case 12:
                _iteratorNormalCompletion1 = true;
                return [
                    3,
                    10
                ];
            case 13:
                return [
                    3,
                    16
                ];
            case 14:
                err = _state.sent();
                _didIteratorError1 = true;
                _iteratorError1 = err;
                return [
                    3,
                    16
                ];
            case 15:
                try {
                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                        _iterator1.return();
                    }
                } finally{
                    if (_didIteratorError1) {
                        throw _iteratorError1;
                    }
                }
                return [
                    7
                ];
            case 16:
                return [
                    2
                ];
        }
    });
}

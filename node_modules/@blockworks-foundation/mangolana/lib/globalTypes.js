"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSignaturePubKeyPair = exports.getTimeoutConfig = exports.isBlockHeightStrategy = exports.BlockHeightStrategyClass = exports.TimeStrategyClass = exports.SequenceType = exports.TransactionInstructionWithSigners = void 0;
class TransactionInstructionWithSigners {
    constructor(transactionInstruction, signers = [], alts = []) {
        this.signers = [];
        this.alts = [];
        this.transactionInstruction = transactionInstruction;
        this.signers = signers;
        this.alts = alts;
    }
}
exports.TransactionInstructionWithSigners = TransactionInstructionWithSigners;
var SequenceType;
(function (SequenceType) {
    SequenceType[SequenceType["Sequential"] = 0] = "Sequential";
    SequenceType[SequenceType["Parallel"] = 1] = "Parallel";
    SequenceType[SequenceType["StopOnFailure"] = 2] = "StopOnFailure";
})(SequenceType || (exports.SequenceType = SequenceType = {}));
class TimeStrategyClass {
    constructor({ timeout = 90, getSignatureStatusesPoolIntervalMs = 4000, }) {
        this.timeout = timeout;
        this.getSignatureStatusesPoolIntervalMs = getSignatureStatusesPoolIntervalMs;
    }
}
exports.TimeStrategyClass = TimeStrategyClass;
class BlockHeightStrategyClass {
    constructor({ startBlockCheckAfterSecs = 10, block, getSignatureStatusesPoolIntervalMs = 4000, }) {
        this.startBlockCheckAfterSecs = startBlockCheckAfterSecs;
        this.block = block;
        this.getSignatureStatusesPoolIntervalMs = getSignatureStatusesPoolIntervalMs;
    }
}
exports.BlockHeightStrategyClass = BlockHeightStrategyClass;
const isBlockHeightStrategy = (timeoutStrategy) => {
    return 'block' in timeoutStrategy;
};
exports.isBlockHeightStrategy = isBlockHeightStrategy;
const getTimeoutConfig = (timeoutStrategy) => {
    const isBhStrategy = (0, exports.isBlockHeightStrategy)(timeoutStrategy);
    const timeoutConfig = !isBhStrategy
        ? new TimeStrategyClass({ ...timeoutStrategy })
        : new BlockHeightStrategyClass({ ...timeoutStrategy });
    return timeoutConfig;
};
exports.getTimeoutConfig = getTimeoutConfig;
function isSignaturePubKeyPair(sigPubkey) {
    return sigPubkey?.signature !== undefined;
}
exports.isSignaturePubKeyPair = isSignaturePubKeyPair;

import { BlockhashWithExpiryBlockHeight, Keypair, TransactionInstruction } from '@solana/web3.js';
export declare class TransactionInstructionWithSigners {
    transactionInstruction: TransactionInstruction;
    signers: Keypair[];
    constructor(transactionInstruction: TransactionInstruction, signers?: Keypair[]);
}
export declare class _TransactionInstructionWithIndex extends TransactionInstructionWithSigners {
    index: number;
    constructor(transactionInstruction: TransactionInstruction, signers: Keypair[] | undefined, index: number);
}
export declare type _SendedTransactionWithTimestamp = {
    id: string;
    timestamp: number;
    index: number;
    sendedAtBlock: number;
};
export declare type _SendedTransactionWithIndex = {
    id: string;
    index: number;
};
export declare type WalletSigner = Pick<any, 'publicKey' | 'signTransaction' | 'signAllTransactions'>;
export interface TransactionInstructionWithType {
    instructionsSet: TransactionInstructionWithSigners[];
    sequenceType?: SequenceType;
}
export interface TransactionsPlayingIndexes {
    transactionsIdx: {
        [txIdx: number]: number;
    }[];
    sequenceType?: SequenceType;
}
export declare enum SequenceType {
    Sequential = 0,
    Parallel = 1,
    StopOnFailure = 2
}
/**
 * @param timeout optional (secs) after how much secs not confirmed transaction will be considered timeout, default: 90
 * @param getSignatureStatusesPoolIntervalMs optional (ms) pool interval of getSignatureStatues, default: 2000
 */
export declare type TimeStrategy = {
    timeout: number;
    getSignatureStatusesPoolIntervalMs?: number;
};
/**
 * @param startBlockCheckAfterSecs optional (secs) after that time we will start to pool current blockheight and check if transaction will reach blockchain, default: 90
 * @param block BlockhashWithExpiryBlockHeight
 * @param getSignatureStatusesPoolIntervalMs optional (ms) pool interval of getSignatureStatues and blockheight, default: 2000
 */
export declare type BlockHeightStrategy = {
    startBlockCheckAfterSecs?: number;
    block: BlockhashWithExpiryBlockHeight;
    getSignatureStatusesPoolIntervalMs?: number;
};
export declare class TimeStrategyClass implements TimeStrategy {
    timeout: number;
    getSignatureStatusesPoolIntervalMs: number;
    constructor({ timeout, getSignatureStatusesPoolIntervalMs, }: {
        timeout: number;
        getSignatureStatusesPoolIntervalMs?: number;
    });
}
export declare class BlockHeightStrategyClass implements BlockHeightStrategy {
    startBlockCheckAfterSecs: number;
    block: BlockhashWithExpiryBlockHeight;
    getSignatureStatusesPoolIntervalMs: number;
    constructor({ startBlockCheckAfterSecs, block, getSignatureStatusesPoolIntervalMs, }: {
        block: BlockhashWithExpiryBlockHeight;
        getSignatureStatusesPoolIntervalMs?: number;
        startBlockCheckAfterSecs?: number;
    });
}

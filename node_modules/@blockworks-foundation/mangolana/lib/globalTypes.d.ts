/// <reference types="node" />
import { AddressLookupTableAccount, BlockhashWithExpiryBlockHeight, Keypair, PublicKey, TransactionInstruction } from '@solana/web3.js';
export type WalletSigner = Pick<any, 'publicKey' | 'signTransaction' | 'signAllTransactions'>;
export declare class TransactionInstructionWithSigners {
    transactionInstruction: TransactionInstruction;
    signers?: Keypair[];
    alts?: AddressLookupTableAccount[];
    constructor(transactionInstruction: TransactionInstruction, signers?: Keypair[], alts?: AddressLookupTableAccount[]);
}
export declare enum SequenceType {
    Sequential = 0,
    Parallel = 1,
    StopOnFailure = 2
}
export interface TimeoutStrategy {
    getSignatureStatusesPoolIntervalMs?: number;
}
/**
 * @param timeout optional (secs) after how much secs not confirmed transaction will be considered timeout, default: 90
 * @param getSignatureStatusesPoolIntervalMs optional (ms) pool interval of getSignatureStatues, default: 4000
 */
export interface Time {
    timeout: number;
}
/**
 * @param startBlockCheckAfterSecs optional (secs) after that time we will start to pool current blockheight and check if transaction will reach blockchain, default: 90
 * @param block BlockhashWithExpiryBlockHeight
 * @param getSignatureStatusesPoolIntervalMs optional (ms) pool interval of getSignatureStatues and blockheight, default: 4000
 */
export interface BlockHeight {
    startBlockCheckAfterSecs?: number;
    block: BlockhashWithExpiryBlockHeight;
}
export declare class TimeStrategyClass implements TimeStrategy {
    timeout: number;
    getSignatureStatusesPoolIntervalMs: number;
    constructor({ timeout, getSignatureStatusesPoolIntervalMs, }: {
        timeout: number;
        getSignatureStatusesPoolIntervalMs?: number;
    });
}
export declare class BlockHeightStrategyClass implements BlockHeightStrategy {
    startBlockCheckAfterSecs: number;
    block: BlockhashWithExpiryBlockHeight;
    getSignatureStatusesPoolIntervalMs: number;
    constructor({ startBlockCheckAfterSecs, block, getSignatureStatusesPoolIntervalMs, }: {
        block: BlockhashWithExpiryBlockHeight;
        getSignatureStatusesPoolIntervalMs?: number;
        startBlockCheckAfterSecs?: number;
    });
}
export type BlockHeightStrategy = TimeoutStrategy & BlockHeight;
export type TimeStrategy = TimeoutStrategy & Time;
export declare const isBlockHeightStrategy: (timeoutStrategy: BlockHeightStrategy | TimeStrategy) => timeoutStrategy is BlockHeightStrategy;
export declare const getTimeoutConfig: (timeoutStrategy: BlockHeightStrategy | TimeStrategy) => TimeStrategyClass | BlockHeightStrategyClass;
export type SignaturePubkeyPair = {
    signature: Buffer | null;
    publicKey: PublicKey;
};
export declare function isSignaturePubKeyPair(sigPubkey: any): sigPubkey is SignaturePubkeyPair;

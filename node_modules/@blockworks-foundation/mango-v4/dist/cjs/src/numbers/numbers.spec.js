"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const chai_1 = require("chai");
const utils_1 = require("../utils");
const I80F48_1 = require("./I80F48");
describe('Math', () => {
    it('round to accuracy 5', () => {
        (0, chai_1.expect)((0, utils_1.roundTo5)(0.012)).equals(0.012);
        (0, chai_1.expect)((0, utils_1.roundTo5)(0.0123456789)).equals(0.012345);
        (0, chai_1.expect)((0, utils_1.roundTo5)(0.123456789)).equals(0.12345);
        (0, chai_1.expect)((0, utils_1.roundTo5)(1.23456789)).equals(1.2345);
        (0, chai_1.expect)((0, utils_1.roundTo5)(12.3456789)).equals(12.345);
        (0, chai_1.expect)((0, utils_1.roundTo5)(123.456789)).equals(123.45);
        (0, chai_1.expect)((0, utils_1.roundTo5)(1234.56789)).equals(1234.5);
        (0, chai_1.expect)((0, utils_1.roundTo5)(12345.6789)).equals(12346);
        (0, chai_1.expect)((0, utils_1.roundTo5)(123456.789)).equals(123457);
        (0, chai_1.expect)((0, utils_1.roundTo5)(1.23)).equals(1.2299);
        (0, chai_1.expect)((0, utils_1.roundTo5)(1.2)).equals(1.1999);
    });
    it('js number to BN and I80F48', () => {
        // BN can be only be created from js numbers which are <=2^53
        (0, chai_1.expect)(function () {
            new bn_js_1.default(0x1fffffffffffff);
        }).to.not.throw('Assertion failed');
        (0, chai_1.expect)(function () {
            new bn_js_1.default(0x20000000000000);
        }).to.throw('Assertion failed');
        // max BN cant be converted to a number
        (0, chai_1.expect)(function () {
            utils_1.U64_MAX_BN.toNumber();
        }).to.throw('Number can only safely store up to 53 bits');
        // max I80F48 can be converted to a number
        // though, the number is represented in scientific notation
        // anything above ^20 gets represented with scientific notation
        (0, chai_1.expect)(I80F48_1.I80F48.fromString('604462909807314587353087.999999999999996')
            .toNumber()
            .toString()).equals('6.044629098073146e+23');
        // I80F48 constructor takes a BN, but it doesnt do what one might think it does
        (0, chai_1.expect)(new I80F48_1.I80F48(new bn_js_1.default(10)).toNumber()).not.equals(10);
        (0, chai_1.expect)(I80F48_1.I80F48.fromI64(new bn_js_1.default(10)).toNumber()).equals(10);
        // BN treats input as whole integer
        (0, chai_1.expect)(new bn_js_1.default(1.5).toNumber()).equals(1);
    });
});

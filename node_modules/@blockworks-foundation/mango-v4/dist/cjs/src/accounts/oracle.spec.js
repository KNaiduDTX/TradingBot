"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const chai_1 = require("chai");
const oracle_1 = require("./oracle");
const client_1 = require("../client");
const constants_1 = require("../constants");
const anchor_1 = require("@coral-xyz/anchor");
const fs = __importStar(require("fs"));
const group_1 = require("./group");
function getProvider(connection) {
    const secretKey = JSON.parse(fs.readFileSync(process.env.KEYPAIR_PATH, 'utf-8'));
    const kp = web3_js_1.Keypair.fromSecretKey(Uint8Array.from(secretKey));
    const wallet = new anchor_1.Wallet(kp);
    const provider = new anchor_1.AnchorProvider(connection, wallet, {});
    return provider;
}
describe.only('Oracle', () => {
    const connection = new web3_js_1.Connection('https://api.mainnet-beta.solana.com/');
    const CLUSTER = 'mainnet-beta';
    const Orca_SOL_USDC_Whirlpool = new web3_js_1.PublicKey('83v8iPyZihDEjDdY8RdZddyZNyUtXngz69Lgo9Kt5d6d');
    const Raydium_SOL_USDC_Whirlpool = new web3_js_1.PublicKey('Ds33rQ1d4AXwxqyeXX6Pc3G4pFNr6iWb3dd8YfBBQMPr');
    it('can decode Orca CLMM oracles', async () => {
        const accInfo = await connection.getAccountInfo(Orca_SOL_USDC_Whirlpool);
        (0, chai_1.expect)(accInfo).not.to.be.null;
        (0, chai_1.expect)((0, oracle_1.isOrcaOracle)(accInfo)).to.be.true;
        const other = await connection.getAccountInfo(Raydium_SOL_USDC_Whirlpool);
        (0, chai_1.expect)((0, oracle_1.isOrcaOracle)(other)).to.be.false;
        const quoteKey = (0, oracle_1.deriveFallbackOracleQuoteKey)(accInfo);
        (0, chai_1.expect)(quoteKey.equals(oracle_1.USDC_MINT_MAINNET)).to.be.true;
    });
    it('can decode Raydium CLMM oracles', async () => {
        const accInfo = await connection.getAccountInfo(Raydium_SOL_USDC_Whirlpool);
        (0, chai_1.expect)(accInfo).not.to.be.null;
        (0, chai_1.expect)((0, oracle_1.isRaydiumOracle)(accInfo)).to.be.true;
        const other = await connection.getAccountInfo(Orca_SOL_USDC_Whirlpool);
        (0, chai_1.expect)((0, oracle_1.isRaydiumOracle)(other)).to.be.false;
        const quoteKey = (0, oracle_1.deriveFallbackOracleQuoteKey)(accInfo);
        (0, chai_1.expect)(quoteKey.equals(oracle_1.USDC_MINT_MAINNET)).to.be.true;
    });
    it.skip('can generate fixed fallback oracles', async () => {
        const provider = getProvider(connection);
        const client = client_1.MangoClient.connect(provider, CLUSTER, constants_1.MANGO_V4_ID[CLUSTER], {
            fallbackOracleConfig: [
                new web3_js_1.PublicKey('H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG'),
            ],
        }); // SOL
        const groupAccount = await client.program.account.group.fetch(constants_1.MANGO_V4_MAIN_GROUP);
        const GROUP = group_1.Group.from(constants_1.MANGO_V4_MAIN_GROUP, groupAccount);
        await GROUP.reloadBanks(client);
        const fbs = await client.deriveFallbackOracleContexts(GROUP);
        (0, chai_1.expect)(fbs.size).to.equal(1);
    });
    it.skip('can generate all fallback oracles', async () => {
        const provider = getProvider(connection);
        const client = client_1.MangoClient.connect(provider, CLUSTER, constants_1.MANGO_V4_ID[CLUSTER], { fallbackOracleConfig: 'all' });
        const groupAccount = await client.program.account.group.fetch(constants_1.MANGO_V4_MAIN_GROUP);
        const GROUP = group_1.Group.from(constants_1.MANGO_V4_MAIN_GROUP, groupAccount);
        await GROUP.reloadBanks(client);
        const fbs = await client.deriveFallbackOracleContexts(GROUP);
        (0, chai_1.expect)(fbs.size).to.be.greaterThan(1);
    });
    it.skip('can generate dynamic fallback oracles', async () => {
        const provider = getProvider(connection);
        const client = client_1.MangoClient.connect(provider, CLUSTER, constants_1.MANGO_V4_ID[CLUSTER], { fallbackOracleConfig: 'dynamic' });
        const groupAccount = await client.program.account.group.fetch(constants_1.MANGO_V4_MAIN_GROUP);
        const GROUP = group_1.Group.from(constants_1.MANGO_V4_MAIN_GROUP, groupAccount);
        await GROUP.reloadBanks(client);
        const fbs = await client.deriveFallbackOracleContexts(GROUP);
        console.log(fbs.size);
    });
});

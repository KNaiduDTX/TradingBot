import { AnchorProvider } from '@coral-xyz/anchor';
import { AddressLookupTableAccount, PublicKey, Signer, TransactionInstruction, VersionedTransaction } from '@solana/web3.js';
import BN from 'bn.js';
import { Bank } from './accounts/bank';
import { I80F48 } from './numbers/I80F48';
export declare const U64_MAX_BN: BN;
export declare const I64_MAX_BN: BN;
export declare function bpsToDecimal(bps: number): number;
export declare function percentageToDecimal(percentage: number): number;
export declare function toNativeI80F48ForQuote(uiAmount: number): I80F48;
export declare function toNativeI80F48(uiAmount: number, decimals: number): I80F48;
export declare function toNative(uiAmount: number, decimals: number): BN;
export declare function toNativeSellPerBuyTokenPrice(price: number, sellBank: Bank, buyBank: Bank): number;
export declare function toUiSellPerBuyTokenPrice(price: number, sellBank: Bank, buyBank: Bank): number;
export declare function toUiDecimals(nativeAmount: BN | I80F48 | number, decimals: number): number;
export declare const QUOTE_DECIMALS = 6;
export declare function toUiDecimalsForQuote(nativeAmount: BN | I80F48 | number): number;
export declare function toUiI80F48(nativeAmount: I80F48, decimals: number): I80F48;
export declare function roundTo5(number: any): number;
export declare function buildFetch(): Promise<(input: RequestInfo | URL, init?: RequestInit | undefined) => Promise<Response>>;
/**
 * Get the address of the associated token account for a given mint and owner
 *
 * @param mint                     Token mint account
 * @param owner                    Owner of the new account
 * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)
 * @param programId                SPL Token program account
 * @param associatedTokenProgramId SPL Associated Token program account
 *
 * @return Address of the associated token account
 */
export declare function getAssociatedTokenAddress(mint: PublicKey, owner: PublicKey, allowOwnerOffCurve?: boolean, programId?: PublicKey, associatedTokenProgramId?: PublicKey): Promise<PublicKey>;
export declare function createAssociatedTokenAccountIdempotentInstruction(payer: PublicKey, owner: PublicKey, mint: PublicKey): Promise<TransactionInstruction>;
export declare function buildVersionedTx(provider: AnchorProvider, ix: TransactionInstruction[], additionalSigners?: Signer[], alts?: AddressLookupTableAccount[]): Promise<VersionedTransaction>;
export declare abstract class As<Tag extends keyof never> {
    private static readonly $as$;
    private [As.$as$];
}
export declare function deepClone<T>(obj: T, hash?: WeakMap<WeakKey, any>): T;
export declare const tryStringify: (val: any) => string | null;

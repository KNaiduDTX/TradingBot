import { JUPITER } from './constants';
export var TransactionErrors;
(function (TransactionErrors) {
    TransactionErrors[TransactionErrors["MangoNoFreeTokenPositionIndex"] = 0] = "MangoNoFreeTokenPositionIndex";
    TransactionErrors[TransactionErrors["MangoNoFreeSerum3OpenOrdersIndex"] = 1] = "MangoNoFreeSerum3OpenOrdersIndex";
    TransactionErrors[TransactionErrors["MangoNoFreePerpPositionIndex"] = 2] = "MangoNoFreePerpPositionIndex";
    // Slippage incurred was higher than user expected
    TransactionErrors[TransactionErrors["JupiterSlippageToleranceExceeded"] = 3] = "JupiterSlippageToleranceExceeded";
    TransactionErrors[TransactionErrors["Unknown"] = 4] = "Unknown";
})(TransactionErrors || (TransactionErrors = {}));
export function containsJupiterProgram(logMessages) {
    return (logMessages.some((msg) => msg.includes(JUPITER.V3.toBase58())) ||
        logMessages.some((msg) => msg.includes(JUPITER.V4.toBase58())) ||
        logMessages.some((msg) => msg.includes(JUPITER.V6.toBase58())));
}
export async function parseTxForKnownErrors(connection, signature) {
    const tx = await connection.getTransaction(signature, {
        commitment: 'confirmed',
        maxSupportedTransactionVersion: 0,
    });
    if (tx && tx.meta && tx.meta.logMessages) {
        if (tx.meta.logMessages.some((msg) => msg.includes('NoFreeTokenPositionIndex'))) {
            return TransactionErrors.MangoNoFreeTokenPositionIndex;
        }
        if (tx.meta.logMessages.some((msg) => msg.includes('NoFreeSerum3OpenOrdersIndex'))) {
            return TransactionErrors.MangoNoFreeSerum3OpenOrdersIndex;
        }
        if (tx.meta.logMessages.some((msg) => msg.includes('NoFreePerpPositionIndex'))) {
            return TransactionErrors.MangoNoFreePerpPositionIndex;
        }
        if (tx.meta.logMessages.some((msg) => msg.includes('SlippageToleranceExceeded')) &&
            containsJupiterProgram(tx.meta.logMessages)) {
            return TransactionErrors.JupiterSlippageToleranceExceeded;
        }
    }
    return TransactionErrors.Unknown;
}
